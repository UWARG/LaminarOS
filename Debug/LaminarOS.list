
LaminarOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006604  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006854  08006854  0002016c  2**0
                  CONTENTS
  4 .ARM          00000008  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800685c  0800685c  0002016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08006868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004654  2000016c  080069d4  0002016c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200047c0  080069d4  000247c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce43  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000413f  00000000  00000000  0003cfdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  00041120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  00042918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb27  00000000  00000000  00043f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4f8  00000000  00000000  00060abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6630  00000000  00000000  0007efb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001255e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006688  00000000  00000000  00125638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000016c 	.word	0x2000016c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800678c 	.word	0x0800678c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000170 	.word	0x20000170
 80001dc:	0800678c 	.word	0x0800678c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b21      	ldr	r3, [pc, #132]	; (800057c <MX_ADC1_Init+0x98>)
 80004f8:	4a21      	ldr	r2, [pc, #132]	; (8000580 <MX_ADC1_Init+0x9c>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004fc:	4b1f      	ldr	r3, [pc, #124]	; (800057c <MX_ADC1_Init+0x98>)
 80004fe:	2200      	movs	r2, #0
 8000500:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000502:	4b1e      	ldr	r3, [pc, #120]	; (800057c <MX_ADC1_Init+0x98>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <MX_ADC1_Init+0x98>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800050e:	4b1b      	ldr	r3, [pc, #108]	; (800057c <MX_ADC1_Init+0x98>)
 8000510:	2200      	movs	r2, #0
 8000512:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <MX_ADC1_Init+0x98>)
 800051e:	2200      	movs	r2, #0
 8000520:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MX_ADC1_Init+0x98>)
 8000524:	4a17      	ldr	r2, [pc, #92]	; (8000584 <MX_ADC1_Init+0xa0>)
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000528:	4b14      	ldr	r3, [pc, #80]	; (800057c <MX_ADC1_Init+0x98>)
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <MX_ADC1_Init+0x98>)
 8000530:	2201      	movs	r2, #1
 8000532:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000534:	4b11      	ldr	r3, [pc, #68]	; (800057c <MX_ADC1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053c:	4b0f      	ldr	r3, [pc, #60]	; (800057c <MX_ADC1_Init+0x98>)
 800053e:	2201      	movs	r2, #1
 8000540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <MX_ADC1_Init+0x98>)
 8000544:	f001 fb02 	bl	8001b4c <HAL_ADC_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800054e:	f000 fab1 	bl	8000ab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000552:	2306      	movs	r3, #6
 8000554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000556:	2301      	movs	r3, #1
 8000558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	463b      	mov	r3, r7
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	; (800057c <MX_ADC1_Init+0x98>)
 8000564:	f001 fb36 	bl	8001bd4 <HAL_ADC_ConfigChannel>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800056e:	f000 faa1 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000188 	.word	0x20000188
 8000580:	40012000 	.word	0x40012000
 8000584:	0f000001 	.word	0x0f000001

08000588 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <HAL_ADC_MspInit+0xb0>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d141      	bne.n	800062e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b2:	4a22      	ldr	r2, [pc, #136]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b8:	6453      	str	r3, [r2, #68]	; 0x44
 80005ba:	4b20      	ldr	r3, [pc, #128]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1b      	ldr	r2, [pc, #108]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b19      	ldr	r3, [pc, #100]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a14      	ldr	r2, [pc, #80]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <HAL_ADC_MspInit+0xb4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN6_Pin|ADC_IN7_Pin;
 80005fe:	23c0      	movs	r3, #192	; 0xc0
 8000600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000602:	2303      	movs	r3, #3
 8000604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	480b      	ldr	r0, [pc, #44]	; (8000640 <HAL_ADC_MspInit+0xb8>)
 8000612:	f002 f8c9 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IN8_Pin|ADC_IN9_Pin;
 8000616:	2303      	movs	r3, #3
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_ADC_MspInit+0xbc>)
 800062a:	f002 f8bd 	bl	80027a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3728      	adds	r7, #40	; 0x28
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40012000 	.word	0x40012000
 800063c:	40023800 	.word	0x40023800
 8000640:	40020000 	.word	0x40020000
 8000644:	40020400 	.word	0x40020400

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <MX_DMA_Init+0x6c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a17      	ldr	r2, [pc, #92]	; (80006b4 <MX_DMA_Init+0x6c>)
 8000658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <MX_DMA_Init+0x6c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2105      	movs	r1, #5
 800066e:	2039      	movs	r0, #57	; 0x39
 8000670:	f001 fd86 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000674:	2039      	movs	r0, #57	; 0x39
 8000676:	f001 fd9f 	bl	80021b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2105      	movs	r1, #5
 800067e:	203a      	movs	r0, #58	; 0x3a
 8000680:	f001 fd7e 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000684:	203a      	movs	r0, #58	; 0x3a
 8000686:	f001 fd97 	bl	80021b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2105      	movs	r1, #5
 800068e:	203c      	movs	r0, #60	; 0x3c
 8000690:	f001 fd76 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000694:	203c      	movs	r0, #60	; 0x3c
 8000696:	f001 fd8f 	bl	80021b8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2105      	movs	r1, #5
 800069e:	2045      	movs	r0, #69	; 0x45
 80006a0:	f001 fd6e 	bl	8002180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006a4:	2045      	movs	r0, #69	; 0x45
 80006a6:	f001 fd87 	bl	80021b8 <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4a07      	ldr	r2, [pc, #28]	; (80006e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80006c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <vApplicationGetIdleTaskMemory+0x30>)
 80006ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	200001d4 	.word	0x200001d4
 80006e8:	20000288 	.word	0x20000288

080006ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_FREERTOS_Init+0x30>)
 80006f4:	1d3c      	adds	r4, r7, #4
 80006f6:	461d      	mov	r5, r3
 80006f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000700:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fcf8 	bl	80050fe <osThreadCreate>
 800070e:	4603      	mov	r3, r0
 8000710:	4a03      	ldr	r2, [pc, #12]	; (8000720 <MX_FREERTOS_Init+0x34>)
 8000712:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000714:	bf00      	nop
 8000716:	3720      	adds	r7, #32
 8000718:	46bd      	mov	sp, r7
 800071a:	bdb0      	pop	{r4, r5, r7, pc}
 800071c:	080067b0 	.word	0x080067b0
 8000720:	200001d0 	.word	0x200001d0

08000724 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800072c:	2001      	movs	r0, #1
 800072e:	f004 fd32 	bl	8005196 <osDelay>
 8000732:	e7fb      	b.n	800072c <StartDefaultTask+0x8>

08000734 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_GPIO_Init+0x140>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a48      	ldr	r2, [pc, #288]	; (8000874 <MX_GPIO_Init+0x140>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b46      	ldr	r3, [pc, #280]	; (8000874 <MX_GPIO_Init+0x140>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <MX_GPIO_Init+0x140>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a41      	ldr	r2, [pc, #260]	; (8000874 <MX_GPIO_Init+0x140>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b3f      	ldr	r3, [pc, #252]	; (8000874 <MX_GPIO_Init+0x140>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_GPIO_Init+0x140>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a3a      	ldr	r2, [pc, #232]	; (8000874 <MX_GPIO_Init+0x140>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b38      	ldr	r3, [pc, #224]	; (8000874 <MX_GPIO_Init+0x140>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x140>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <MX_GPIO_Init+0x140>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0x140>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	482e      	ldr	r0, [pc, #184]	; (8000878 <MX_GPIO_Init+0x144>)
 80007c0:	f002 f976 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_OUT1_Pin|GPIO_OUT2_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2130      	movs	r1, #48	; 0x30
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <MX_GPIO_Init+0x148>)
 80007ca:	f002 f971 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4825      	ldr	r0, [pc, #148]	; (800087c <MX_GPIO_Init+0x148>)
 80007e6:	f001 ffdf 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_IN1_Pin;
 80007ea:	2301      	movs	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN1_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	4619      	mov	r1, r3
 80007fc:	481f      	ldr	r0, [pc, #124]	; (800087c <MX_GPIO_Init+0x148>)
 80007fe:	f001 ffd3 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RSSI_Pin;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RSSI_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4819      	ldr	r0, [pc, #100]	; (800087c <MX_GPIO_Init+0x148>)
 8000818:	f001 ffc6 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800081c:	2320      	movs	r3, #32
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0x144>)
 8000834:	f001 ffb8 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_OUT1_Pin|GPIO_OUT2_Pin;
 8000838:	2330      	movs	r3, #48	; 0x30
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x148>)
 8000850:	f001 ffaa 	bl	80027a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_IN2_Pin;
 8000854:	2304      	movs	r3, #4
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_IN2_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_GPIO_Init+0x14c>)
 8000868:	f001 ff9e 	bl	80027a8 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40023800 	.word	0x40023800
 8000878:	40020000 	.word	0x40020000
 800087c:	40020800 	.word	0x40020800
 8000880:	40020400 	.word	0x40020400

08000884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_I2C1_Init+0x50>)
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <MX_I2C1_Init+0x54>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <MX_I2C1_Init+0x58>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_I2C1_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_I2C1_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_I2C1_Init+0x50>)
 80008c2:	f002 f90f 	bl	8002ae4 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 f8f2 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000488 	.word	0x20000488
 80008d8:	40005400 	.word	0x40005400
 80008dc:	000186a0 	.word	0x000186a0

080008e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_I2C_MspInit+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d12c      	bne.n	800095c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_I2C_MspInit+0x88>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800091e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000930:	2304      	movs	r3, #4
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <HAL_I2C_MspInit+0x8c>)
 800093c:	f001 ff34 	bl	80027a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_I2C_MspInit+0x88>)
 800094a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_I2C_MspInit+0x88>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40005400 	.word	0x40005400
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f001 f8a8 	bl	8001ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f820 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f7ff feda 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000980:	f000 ff52 	bl	8001828 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000984:	f7ff fe60 	bl	8000648 <MX_DMA_Init>
  MX_TIM3_Init();
 8000988:	f000 fbf0 	bl	800116c <MX_TIM3_Init>
  MX_TIM1_Init();
 800098c:	f000 fab0 	bl	8000ef0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000990:	f7ff fda8 	bl	80004e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000994:	f7ff ff76 	bl	8000884 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000998:	f000 f892 	bl	8000ac0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800099c:	f000 f8c2 	bl	8000b24 <MX_SPI3_Init>
  MX_TIM2_Init();
 80009a0:	f000 fb6a 	bl	8001078 <MX_TIM2_Init>
  MX_TIM5_Init();
 80009a4:	f000 fc7a 	bl	800129c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80009a8:	f000 ff14 	bl	80017d4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ac:	f000 ff66 	bl	800187c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009b0:	f7ff fe9c 	bl	80006ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009b4:	f004 fb9c 	bl	80050f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x48>
	...

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f005 fe14 	bl	80065f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xcc>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a27      	ldr	r2, [pc, #156]	; (8000a88 <SystemClock_Config+0xcc>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b25      	ldr	r3, [pc, #148]	; (8000a88 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b1e      	ldr	r3, [pc, #120]	; (8000a8c <SystemClock_Config+0xd0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a20:	2301      	movs	r3, #1
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a24:	2310      	movs	r3, #16
 8000a26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a30:	2308      	movs	r3, #8
 8000a32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 f991 	bl	8002d6c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a50:	f000 f830 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2101      	movs	r1, #1
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 fbf3 	bl	800325c <HAL_RCC_ClockConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a7c:	f000 f81a 	bl	8000ab4 <Error_Handler>
  }
}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	; 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d101      	bne.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aa2:	f001 f833 	bl	8001b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40014800 	.word	0x40014800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000ac6:	4a16      	ldr	r2, [pc, #88]	; (8000b20 <MX_SPI2_Init+0x60>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000b02:	220a      	movs	r2, #10
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_SPI2_Init+0x5c>)
 8000b08:	f002 fdfa 	bl	8003700 <HAL_SPI_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8000b12:	f7ff ffcf 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200004dc 	.word	0x200004dc
 8000b20:	40003800 	.word	0x40003800

08000b24 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <MX_SPI3_Init+0x60>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b66:	220a      	movs	r2, #10
 8000b68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <MX_SPI3_Init+0x5c>)
 8000b6c:	f002 fdc8 	bl	8003700 <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI3_Init+0x56>
  {
    Error_Handler();
 8000b76:	f7ff ff9d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000534 	.word	0x20000534
 8000b84:	40003c00 	.word	0x40003c00

08000b88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08e      	sub	sp, #56	; 0x38
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a51      	ldr	r2, [pc, #324]	; (8000cec <HAL_SPI_MspInit+0x164>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d14b      	bne.n	8000c42 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
 8000bae:	4b50      	ldr	r3, [pc, #320]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b4d      	ldr	r3, [pc, #308]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	623b      	str	r3, [r7, #32]
 8000bc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	4b49      	ldr	r3, [pc, #292]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a48      	ldr	r2, [pc, #288]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bd0:	f043 0304 	orr.w	r3, r3, #4
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b46      	ldr	r3, [pc, #280]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0304 	and.w	r3, r3, #4
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a41      	ldr	r2, [pc, #260]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000bfe:	230c      	movs	r3, #12
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	4836      	ldr	r0, [pc, #216]	; (8000cf4 <HAL_SPI_MspInit+0x16c>)
 8000c1a:	f001 fdc5 	bl	80027a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_NSS_Pin;
 8000c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c30:	2305      	movs	r3, #5
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c38:	4619      	mov	r1, r3
 8000c3a:	482f      	ldr	r0, [pc, #188]	; (8000cf8 <HAL_SPI_MspInit+0x170>)
 8000c3c:	f001 fdb4 	bl	80027a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c40:	e04f      	b.n	8000ce2 <HAL_SPI_MspInit+0x15a>
  else if(spiHandle->Instance==SPI3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <HAL_SPI_MspInit+0x174>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d14a      	bne.n	8000ce2 <HAL_SPI_MspInit+0x15a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c54:	4a26      	ldr	r2, [pc, #152]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5c:	4b24      	ldr	r3, [pc, #144]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0301 	and.w	r3, r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a18      	ldr	r2, [pc, #96]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HAL_SPI_MspInit+0x168>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI3_NSS_Pin;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb0:	2306      	movs	r3, #6
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI3_NSS_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	; (8000d00 <HAL_SPI_MspInit+0x178>)
 8000cbc:	f001 fd74 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI3_SCK_Pin|SPI3_MISO_Pin|SPI3_MOSI_Pin;
 8000cc0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cd2:	2306      	movs	r3, #6
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_SPI_MspInit+0x16c>)
 8000cde:	f001 fd63 	bl	80027a8 <HAL_GPIO_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	3738      	adds	r7, #56	; 0x38
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40003800 	.word	0x40003800
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020800 	.word	0x40020800
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40003c00 	.word	0x40003c00
 8000d00:	40020000 	.word	0x40020000

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x54>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_MspInit+0x54>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x54>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_MspInit+0x54>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <HAL_MspInit+0x54>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <HAL_MspInit+0x54>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	210f      	movs	r1, #15
 8000d46:	f06f 0001 	mvn.w	r0, #1
 8000d4a:	f001 fa19 	bl	8002180 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM11 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority ,0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	201a      	movs	r0, #26
 8000d72:	f001 fa05 	bl	8002180 <HAL_NVIC_SetPriority>

  /* Enable the TIM11 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d76:	201a      	movs	r0, #26
 8000d78:	f001 fa1e 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	4b1e      	ldr	r3, [pc, #120]	; (8000dfc <HAL_InitTick+0xa0>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_InitTick+0xa0>)
 8000d86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d8a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_InitTick+0xa0>)
 8000d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d98:	f107 0210 	add.w	r2, r7, #16
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fc7a 	bl	800369c <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000da8:	f002 fc64 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8000dac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <HAL_InitTick+0xa4>)
 8000db2:	fba2 2303 	umull	r2, r3, r2, r3
 8000db6:	0c9b      	lsrs	r3, r3, #18
 8000db8:	3b01      	subs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dbe:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <HAL_InitTick+0xac>)
 8000dc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc8:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000dca:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim11) == HAL_OK)
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dde:	f002 fd18 	bl	8003812 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d104      	bne.n	8000df2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim11);
 8000de8:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_InitTick+0xa8>)
 8000dea:	f002 fd61 	bl	80038b0 <HAL_TIM_Base_Start_IT>
 8000dee:	4603      	mov	r3, r0
 8000df0:	e000      	b.n	8000df4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	431bde83 	.word	0x431bde83
 8000e04:	2000058c 	.word	0x2000058c
 8000e08:	40014800 	.word	0x40014800

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <NMI_Handler+0x4>

08000e12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <HardFault_Handler+0x4>

08000e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <MemManage_Handler+0x4>

08000e1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000e3e:	f002 fe4b 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200005d4 	.word	0x200005d4

08000e4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e52:	f002 fe41 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200005d4 	.word	0x200005d4

08000e60 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000e66:	f002 fe37 	bl	8003ad8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000e6c:	f002 fe34 	bl	8003ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200005d4 	.word	0x200005d4
 8000e78:	2000058c 	.word	0x2000058c

08000e7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Stream1_IRQHandler+0x10>)
 8000e82:	f001 fa55 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200006f4 	.word	0x200006f4

08000e90 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000e94:	4802      	ldr	r0, [pc, #8]	; (8000ea0 <DMA2_Stream2_IRQHandler+0x10>)
 8000e96:	f001 fa4b 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000754 	.word	0x20000754

08000ea4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch4_trig_com);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA2_Stream4_IRQHandler+0x10>)
 8000eaa:	f001 fa41 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000814 	.word	0x20000814

08000eb8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <DMA2_Stream6_IRQHandler+0x10>)
 8000ebe:	f001 fa37 	bl	8002330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200007b4 	.word	0x200007b4

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch3;
DMA_HandleTypeDef hdma_tim1_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2220      	movs	r2, #32
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f005 fb65 	bl	80065f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2e:	4b50      	ldr	r3, [pc, #320]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f30:	4a50      	ldr	r2, [pc, #320]	; (8001074 <MX_TIM1_Init+0x184>)
 8000f32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f34:	4b4e      	ldr	r3, [pc, #312]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	4b4d      	ldr	r3, [pc, #308]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 320-1;
 8000f40:	4b4b      	ldr	r3, [pc, #300]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f42:	f240 123f 	movw	r2, #319	; 0x13f
 8000f46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f48:	4b49      	ldr	r3, [pc, #292]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f4e:	4b48      	ldr	r3, [pc, #288]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f54:	4b46      	ldr	r3, [pc, #280]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f5a:	4845      	ldr	r0, [pc, #276]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f5c:	f002 fc59 	bl	8003812 <HAL_TIM_Base_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f66:	f7ff fda5 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f74:	4619      	mov	r1, r3
 8000f76:	483e      	ldr	r0, [pc, #248]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f78:	f003 f814 	bl	8003fa4 <HAL_TIM_ConfigClockSource>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f82:	f7ff fd97 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f86:	483a      	ldr	r0, [pc, #232]	; (8001070 <MX_TIM1_Init+0x180>)
 8000f88:	f002 fcf4 	bl	8003974 <HAL_TIM_PWM_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f92:	f7ff fd8f 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4832      	ldr	r0, [pc, #200]	; (8001070 <MX_TIM1_Init+0x180>)
 8000fa6:	f003 fcb1 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fb0:	f7ff fd80 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb4:	2360      	movs	r3, #96	; 0x60
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <MX_TIM1_Init+0x180>)
 8000fda:	f002 ff21 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000fe4:	f7ff fd66 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	2204      	movs	r2, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	481f      	ldr	r0, [pc, #124]	; (8001070 <MX_TIM1_Init+0x180>)
 8000ff2:	f002 ff15 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000ffc:	f7ff fd5a 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	2208      	movs	r2, #8
 8001006:	4619      	mov	r1, r3
 8001008:	4819      	ldr	r0, [pc, #100]	; (8001070 <MX_TIM1_Init+0x180>)
 800100a:	f002 ff09 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001014:	f7ff fd4e 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	220c      	movs	r2, #12
 800101e:	4619      	mov	r1, r3
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_TIM1_Init+0x180>)
 8001022:	f002 fefd 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800102c:	f7ff fd42 	bl	8000ab4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001048:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	4619      	mov	r1, r3
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <MX_TIM1_Init+0x180>)
 8001054:	f003 fcc8 	bl	80049e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800105e:	f7ff fd29 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001062:	4803      	ldr	r0, [pc, #12]	; (8001070 <MX_TIM1_Init+0x180>)
 8001064:	f000 fb32 	bl	80016cc <HAL_TIM_MspPostInit>

}
 8001068:	bf00      	nop
 800106a:	3758      	adds	r7, #88	; 0x58
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	200005d4 	.word	0x200005d4
 8001074:	40010000 	.word	0x40010000

08001078 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800107e:	f107 0318 	add.w	r3, r7, #24
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010a2:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010ac:	221f      	movs	r2, #31
 80010ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010c6:	2280      	movs	r2, #128	; 0x80
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ca:	4827      	ldr	r0, [pc, #156]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010cc:	f002 fba1 	bl	8003812 <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80010d6:	f7ff fced 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010de:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010e0:	f107 0318 	add.w	r3, r7, #24
 80010e4:	4619      	mov	r1, r3
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010e8:	f002 ff5c 	bl	8003fa4 <HAL_TIM_ConfigClockSource>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010f2:	f7ff fcdf 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_TIM2_Init+0xf0>)
 80010f8:	f002 fc95 	bl	8003a26 <HAL_TIM_IC_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001102:	f7ff fcd7 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110e:	f107 0310 	add.w	r3, r7, #16
 8001112:	4619      	mov	r1, r3
 8001114:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_TIM2_Init+0xf0>)
 8001116:	f003 fbf9 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001120:	f7ff fcc8 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	480b      	ldr	r0, [pc, #44]	; (8001168 <MX_TIM2_Init+0xf0>)
 800113c:	f002 fdd4 	bl	8003ce8 <HAL_TIM_IC_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001146:	f7ff fcb5 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	2204      	movs	r2, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_TIM2_Init+0xf0>)
 8001152:	f002 fdc9 	bl	8003ce8 <HAL_TIM_IC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800115c:	f7ff fcaa 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000061c 	.word	0x2000061c

0800116c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <MX_TIM3_Init+0x128>)
 800119e:	4a3e      	ldr	r2, [pc, #248]	; (8001298 <MX_TIM3_Init+0x12c>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 14;
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <MX_TIM3_Init+0x128>)
 80011a4:	220e      	movs	r2, #14
 80011a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b3a      	ldr	r3, [pc, #232]	; (8001294 <MX_TIM3_Init+0x128>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64000;
 80011ae:	4b39      	ldr	r3, [pc, #228]	; (8001294 <MX_TIM3_Init+0x128>)
 80011b0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80011b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <MX_TIM3_Init+0x128>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b35      	ldr	r3, [pc, #212]	; (8001294 <MX_TIM3_Init+0x128>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <MX_TIM3_Init+0x128>)
 80011c4:	f002 fb25 	bl	8003812 <HAL_TIM_Base_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011ce:	f7ff fc71 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011dc:	4619      	mov	r1, r3
 80011de:	482d      	ldr	r0, [pc, #180]	; (8001294 <MX_TIM3_Init+0x128>)
 80011e0:	f002 fee0 	bl	8003fa4 <HAL_TIM_ConfigClockSource>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011ea:	f7ff fc63 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011ee:	4829      	ldr	r0, [pc, #164]	; (8001294 <MX_TIM3_Init+0x128>)
 80011f0:	f002 fbc0 	bl	8003974 <HAL_TIM_PWM_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011fa:	f7ff fc5b 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fe:	2300      	movs	r3, #0
 8001200:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	4619      	mov	r1, r3
 800120c:	4821      	ldr	r0, [pc, #132]	; (8001294 <MX_TIM3_Init+0x128>)
 800120e:	f003 fb7d 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001218:	f7ff fc4c 	bl	8000ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121c:	2360      	movs	r3, #96	; 0x60
 800121e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	4619      	mov	r1, r3
 8001232:	4818      	ldr	r0, [pc, #96]	; (8001294 <MX_TIM3_Init+0x128>)
 8001234:	f002 fdf4 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800123e:	f7ff fc39 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001242:	1d3b      	adds	r3, r7, #4
 8001244:	2204      	movs	r2, #4
 8001246:	4619      	mov	r1, r3
 8001248:	4812      	ldr	r0, [pc, #72]	; (8001294 <MX_TIM3_Init+0x128>)
 800124a:	f002 fde9 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001254:	f7ff fc2e 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2208      	movs	r2, #8
 800125c:	4619      	mov	r1, r3
 800125e:	480d      	ldr	r0, [pc, #52]	; (8001294 <MX_TIM3_Init+0x128>)
 8001260:	f002 fdde 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800126a:	f7ff fc23 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	220c      	movs	r2, #12
 8001272:	4619      	mov	r1, r3
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <MX_TIM3_Init+0x128>)
 8001276:	f002 fdd3 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001280:	f7ff fc18 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <MX_TIM3_Init+0x128>)
 8001286:	f000 fa21 	bl	80016cc <HAL_TIM_MspPostInit>

}
 800128a:	bf00      	nop
 800128c:	3738      	adds	r7, #56	; 0x38
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000664 	.word	0x20000664
 8001298:	40000400 	.word	0x40000400

0800129c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012a2:	f107 0318 	add.w	r3, r7, #24
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012c8:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <MX_TIM5_Init+0xdc>)
 80012ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012ce:	2202      	movs	r2, #2
 80012d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 48000;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012da:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80012de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b23      	ldr	r3, [pc, #140]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012ec:	4821      	ldr	r0, [pc, #132]	; (8001374 <MX_TIM5_Init+0xd8>)
 80012ee:	f002 fa90 	bl	8003812 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 80012f8:	f7ff fbdc 	bl	8000ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001300:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	4619      	mov	r1, r3
 8001308:	481a      	ldr	r0, [pc, #104]	; (8001374 <MX_TIM5_Init+0xd8>)
 800130a:	f002 fe4b 	bl	8003fa4 <HAL_TIM_ConfigClockSource>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001314:	f7ff fbce 	bl	8000ab4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <MX_TIM5_Init+0xd8>)
 800131a:	f002 fb84 	bl	8003a26 <HAL_TIM_IC_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001324:	f7ff fbc6 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001330:	f107 0310 	add.w	r3, r7, #16
 8001334:	4619      	mov	r1, r3
 8001336:	480f      	ldr	r0, [pc, #60]	; (8001374 <MX_TIM5_Init+0xd8>)
 8001338:	f003 fae8 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001342:	f7ff fbb7 	bl	8000ab4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800134a:	2301      	movs	r3, #1
 800134c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <MX_TIM5_Init+0xd8>)
 800135e:	f002 fcc3 	bl	8003ce8 <HAL_TIM_IC_ConfigChannel>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 8001368:	f7ff fba4 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200006ac 	.word	0x200006ac
 8001378:	40000c00 	.word	0x40000c00

0800137c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08e      	sub	sp, #56	; 0x38
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <HAL_TIM_Base_MspInit+0x280>)
 800139a:	4293      	cmp	r3, r2
 800139c:	f040 80fb 	bne.w	8001596 <HAL_TIM_Base_MspInit+0x21a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
 80013a4:	4b96      	ldr	r3, [pc, #600]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	4a95      	ldr	r2, [pc, #596]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	6453      	str	r3, [r2, #68]	; 0x44
 80013b0:	4b93      	ldr	r3, [pc, #588]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80013b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	623b      	str	r3, [r7, #32]
 80013ba:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80013bc:	4b91      	ldr	r3, [pc, #580]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013be:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_TIM_Base_MspInit+0x28c>)
 80013c0:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80013c2:	4b90      	ldr	r3, [pc, #576]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013c4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013ca:	4b8e      	ldr	r3, [pc, #568]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d0:	4b8c      	ldr	r3, [pc, #560]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013d6:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e6:	4b87      	ldr	r3, [pc, #540]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ec:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80013f6:	4b83      	ldr	r3, [pc, #524]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 80013f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fc:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 8001400:	2200      	movs	r2, #0
 8001402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001404:	487f      	ldr	r0, [pc, #508]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 8001406:	f000 fee5 	bl	80021d4 <HAL_DMA_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_TIM_Base_MspInit+0x98>
    {
      Error_Handler();
 8001410:	f7ff fb50 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a7b      	ldr	r2, [pc, #492]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
 800141a:	4a7a      	ldr	r2, [pc, #488]	; (8001604 <HAL_TIM_Base_MspInit+0x288>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8001420:	4b7a      	ldr	r3, [pc, #488]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001422:	4a7b      	ldr	r2, [pc, #492]	; (8001610 <HAL_TIM_Base_MspInit+0x294>)
 8001424:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001426:	4b79      	ldr	r3, [pc, #484]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001428:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800142c:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800142e:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001430:	2240      	movs	r2, #64	; 0x40
 8001432:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001434:	4b75      	ldr	r3, [pc, #468]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800143a:	4b74      	ldr	r3, [pc, #464]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001442:	4b72      	ldr	r3, [pc, #456]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001448:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800144a:	4b70      	ldr	r3, [pc, #448]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 800144c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001450:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8001452:	4b6e      	ldr	r3, [pc, #440]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001454:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001458:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800145a:	4b6c      	ldr	r3, [pc, #432]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 800145c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001460:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001462:	4b6a      	ldr	r3, [pc, #424]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001468:	4868      	ldr	r0, [pc, #416]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 800146a:	f000 feb3 	bl	80021d4 <HAL_DMA_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <HAL_TIM_Base_MspInit+0xfc>
    {
      Error_Handler();
 8001474:	f7ff fb1e 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a64      	ldr	r2, [pc, #400]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 800147c:	629a      	str	r2, [r3, #40]	; 0x28
 800147e:	4a63      	ldr	r2, [pc, #396]	; (800160c <HAL_TIM_Base_MspInit+0x290>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8001484:	4b63      	ldr	r3, [pc, #396]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 8001486:	4a64      	ldr	r2, [pc, #400]	; (8001618 <HAL_TIM_Base_MspInit+0x29c>)
 8001488:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 800148a:	4b62      	ldr	r3, [pc, #392]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 800148c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001490:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001492:	4b60      	ldr	r3, [pc, #384]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 8001494:	2240      	movs	r2, #64	; 0x40
 8001496:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001498:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800149e:	4b5d      	ldr	r3, [pc, #372]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a4:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ac:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014ae:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b4:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 80014b6:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014bc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80014be:	4b55      	ldr	r3, [pc, #340]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014c4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014c6:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80014cc:	4851      	ldr	r0, [pc, #324]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014ce:	f000 fe81 	bl	80021d4 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_TIM_Base_MspInit+0x160>
    {
      Error_Handler();
 80014d8:	f7ff faec 	bl	8000ab4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a4d      	ldr	r2, [pc, #308]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80014e2:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_TIM_Base_MspInit+0x298>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH4_TRIG_COM Init */
    hdma_tim1_ch4_trig_com.Instance = DMA2_Stream4;
 80014e8:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 80014ea:	4a4d      	ldr	r2, [pc, #308]	; (8001620 <HAL_TIM_Base_MspInit+0x2a4>)
 80014ec:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch4_trig_com.Init.Channel = DMA_CHANNEL_6;
 80014ee:	4b4b      	ldr	r3, [pc, #300]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 80014f0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80014f4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014f6:	4b49      	ldr	r3, [pc, #292]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 8001502:	4b46      	ldr	r3, [pc, #280]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001508:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 800150c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001510:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001518:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 800151a:	4b40      	ldr	r3, [pc, #256]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 800151c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001520:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch4_trig_com.Init.Priority = DMA_PRIORITY_HIGH;
 8001522:	4b3e      	ldr	r3, [pc, #248]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001524:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001528:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152a:	4b3c      	ldr	r3, [pc, #240]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 800152c:	2200      	movs	r2, #0
 800152e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch4_trig_com) != HAL_OK)
 8001530:	483a      	ldr	r0, [pc, #232]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001532:	f000 fe4f 	bl	80021d4 <HAL_DMA_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_TIM_Base_MspInit+0x1c4>
    {
      Error_Handler();
 800153c:	f7ff faba 	bl	8000ab4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim1_ch4_trig_com);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a36      	ldr	r2, [pc, #216]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001544:	631a      	str	r2, [r3, #48]	; 0x30
 8001546:	4a35      	ldr	r2, [pc, #212]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim1_ch4_trig_com);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001550:	639a      	str	r2, [r3, #56]	; 0x38
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim1_ch4_trig_com);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
 800155e:	4a2f      	ldr	r2, [pc, #188]	; (800161c <HAL_TIM_Base_MspInit+0x2a0>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	2105      	movs	r1, #5
 8001568:	2018      	movs	r0, #24
 800156a:	f000 fe09 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800156e:	2018      	movs	r0, #24
 8001570:	f000 fe22 	bl	80021b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2105      	movs	r1, #5
 8001578:	2019      	movs	r0, #25
 800157a:	f000 fe01 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800157e:	2019      	movs	r0, #25
 8001580:	f000 fe1a 	bl	80021b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	210f      	movs	r1, #15
 8001588:	201a      	movs	r0, #26
 800158a:	f000 fdf9 	bl	8002180 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800158e:	201a      	movs	r0, #26
 8001590:	f000 fe12 	bl	80021b8 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001594:	e08d      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x336>
  else if(tim_baseHandle->Instance==TIM2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800159e:	d143      	bne.n	8001628 <HAL_TIM_Base_MspInit+0x2ac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	4a15      	ldr	r2, [pc, #84]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6413      	str	r3, [r2, #64]	; 0x40
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	61fb      	str	r3, [r7, #28]
 80015ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x284>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PPM2_Pin|PPM_Pin;
 80015d8:	f248 0302 	movw	r3, #32770	; 0x8002
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2300      	movs	r3, #0
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ea:	2301      	movs	r3, #1
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f2:	4619      	mov	r1, r3
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <HAL_TIM_Base_MspInit+0x2a8>)
 80015f6:	f001 f8d7 	bl	80027a8 <HAL_GPIO_Init>
}
 80015fa:	e05a      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x336>
 80015fc:	40010000 	.word	0x40010000
 8001600:	40023800 	.word	0x40023800
 8001604:	200006f4 	.word	0x200006f4
 8001608:	40026428 	.word	0x40026428
 800160c:	20000754 	.word	0x20000754
 8001610:	40026440 	.word	0x40026440
 8001614:	200007b4 	.word	0x200007b4
 8001618:	400264a0 	.word	0x400264a0
 800161c:	20000814 	.word	0x20000814
 8001620:	40026470 	.word	0x40026470
 8001624:	40020000 	.word	0x40020000
  else if(tim_baseHandle->Instance==TIM3)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a23      	ldr	r2, [pc, #140]	; (80016bc <HAL_TIM_Base_MspInit+0x340>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d10e      	bne.n	8001650 <HAL_TIM_Base_MspInit+0x2d4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	4b22      	ldr	r3, [pc, #136]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a21      	ldr	r2, [pc, #132]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]
}
 800164e:	e030      	b.n	80016b2 <HAL_TIM_Base_MspInit+0x336>
  else if(tim_baseHandle->Instance==TIM5)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_TIM_Base_MspInit+0x348>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12b      	bne.n	80016b2 <HAL_TIM_Base_MspInit+0x336>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001664:	f043 0308 	orr.w	r3, r3, #8
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <HAL_TIM_Base_MspInit+0x344>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001692:	2301      	movs	r3, #1
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80016a2:	2302      	movs	r3, #2
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	4619      	mov	r1, r3
 80016ac:	4806      	ldr	r0, [pc, #24]	; (80016c8 <HAL_TIM_Base_MspInit+0x34c>)
 80016ae:	f001 f87b 	bl	80027a8 <HAL_GPIO_Init>
}
 80016b2:	bf00      	nop
 80016b4:	3738      	adds	r7, #56	; 0x38
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40000400 	.word	0x40000400
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40000c00 	.word	0x40000c00
 80016c8:	40020000 	.word	0x40020000

080016cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a34      	ldr	r2, [pc, #208]	; (80017bc <HAL_TIM_MspPostInit+0xf0>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d11f      	bne.n	800172e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DSHOT4_Pin|DSHOT3_Pin|DSHOT2_Pin|DSHOT1_Pin;
 800170a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800171c:	2301      	movs	r3, #1
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4827      	ldr	r0, [pc, #156]	; (80017c4 <HAL_TIM_MspPostInit+0xf8>)
 8001728:	f001 f83e 	bl	80027a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800172c:	e041      	b.n	80017b2 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a25      	ldr	r2, [pc, #148]	; (80017c8 <HAL_TIM_MspPostInit+0xfc>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d13c      	bne.n	80017b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_TIM_MspPostInit+0xf4>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM2_Pin|PWM3_Pin|PWM4_Pin;
 8001770:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001782:	2302      	movs	r3, #2
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <HAL_TIM_MspPostInit+0x100>)
 800178e:	f001 f80b 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM1_Pin;
 8001792:	2310      	movs	r3, #16
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017a2:	2302      	movs	r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4808      	ldr	r0, [pc, #32]	; (80017d0 <HAL_TIM_MspPostInit+0x104>)
 80017ae:	f000 fffb 	bl	80027a8 <HAL_GPIO_Init>
}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40010000 	.word	0x40010000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40000400 	.word	0x40000400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020400 	.word	0x40020400

080017d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART1_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART1_UART_Init+0x4c>)
 800180c:	f003 f952 	bl	8004ab4 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f7ff f94d 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000874 	.word	0x20000874
 8001824:	40011000 	.word	0x40011000

08001828 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <MX_USART2_UART_Init+0x50>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART2_UART_Init+0x4c>)
 8001860:	f003 f928 	bl	8004ab4 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800186a:	f7ff f923 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200008b8 	.word	0x200008b8
 8001878:	40004400 	.word	0x40004400

0800187c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001880:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 8001882:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_USART6_UART_Init+0x50>)
 8001884:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 8001888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800188c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 80018a2:	220c      	movs	r2, #12
 80018a4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_USART6_UART_Init+0x4c>)
 80018b4:	f003 f8fe 	bl	8004ab4 <HAL_UART_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018be:	f7ff f8f9 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200008fc 	.word	0x200008fc
 80018cc:	40011400 	.word	0x40011400

080018d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08e      	sub	sp, #56	; 0x38
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_UART_MspInit+0x188>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d12c      	bne.n	800194c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a58      	ldr	r2, [pc, #352]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a51      	ldr	r2, [pc, #324]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	61fb      	str	r3, [r7, #28]
 8001928:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800193a:	2307      	movs	r3, #7
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4846      	ldr	r0, [pc, #280]	; (8001a60 <HAL_UART_MspInit+0x190>)
 8001946:	f000 ff2f 	bl	80027a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800194a:	e081      	b.n	8001a50 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a44      	ldr	r2, [pc, #272]	; (8001a64 <HAL_UART_MspInit+0x194>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12c      	bne.n	80019b0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a3f      	ldr	r2, [pc, #252]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800198e:	230c      	movs	r3, #12
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800199e:	2307      	movs	r3, #7
 80019a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a6:	4619      	mov	r1, r3
 80019a8:	482f      	ldr	r0, [pc, #188]	; (8001a68 <HAL_UART_MspInit+0x198>)
 80019aa:	f000 fefd 	bl	80027a8 <HAL_GPIO_Init>
}
 80019ae:	e04f      	b.n	8001a50 <HAL_UART_MspInit+0x180>
  else if(uartHandle->Instance==USART6)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2d      	ldr	r2, [pc, #180]	; (8001a6c <HAL_UART_MspInit+0x19c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d14a      	bne.n	8001a50 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4a26      	ldr	r2, [pc, #152]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b20      	ldr	r3, [pc, #128]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a18      	ldr	r2, [pc, #96]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_UART_MspInit+0x18c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART6_TX_Pin;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART6_TX_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	4619      	mov	r1, r3
 8001a28:	4811      	ldr	r0, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0x1a0>)
 8001a2a:	f000 febd 	bl	80027a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART6_RX_Pin;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a40:	2308      	movs	r3, #8
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(USART6_RX_GPIO_Port, &GPIO_InitStruct);
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_UART_MspInit+0x198>)
 8001a4c:	f000 feac 	bl	80027a8 <HAL_GPIO_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3738      	adds	r7, #56	; 0x38
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40004400 	.word	0x40004400
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40011400 	.word	0x40011400
 8001a70:	40020800 	.word	0x40020800

08001a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a7a:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a0b      	ldr	r2, [pc, #44]	; (8001abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a90:	4c0b      	ldr	r4, [pc, #44]	; (8001ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a9e:	f7ff fa15 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aa2:	f004 fd83 	bl	80065ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aa6:	f7fe ff63 	bl	8000970 <main>
  bx  lr    
 8001aaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001aac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab4:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8001ab8:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8001abc:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8001ac0:	200047c0 	.word	0x200047c0

08001ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ac4:	e7fe      	b.n	8001ac4 <ADC_IRQHandler>
	...

08001ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_Init+0x40>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <HAL_Init+0x40>)
 8001ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_Init+0x40>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_Init+0x40>)
 8001aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af0:	2003      	movs	r0, #3
 8001af2:	f000 fb3a 	bl	800216a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af6:	200f      	movs	r0, #15
 8001af8:	f7ff f930 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001afc:	f7ff f902 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023c00 	.word	0x40023c00

08001b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_IncTick+0x20>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_IncTick+0x24>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_IncTick+0x24>)
 8001b1e:	6013      	str	r3, [r2, #0]
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	20000940 	.word	0x20000940

08001b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return uwTick;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <HAL_GetTick+0x14>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000940 	.word	0x20000940

08001b4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e033      	b.n	8001bca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7fe fd0c 	bl	8000588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 0310 	and.w	r3, r3, #16
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b92:	f023 0302 	bic.w	r3, r3, #2
 8001b96:	f043 0202 	orr.w	r2, r3, #2
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f93a 	bl	8001e18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	f043 0201 	orr.w	r2, r3, #1
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bba:	e001      	b.n	8001bc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e105      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x228>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d925      	bls.n	8001c4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68d9      	ldr	r1, [r3, #12]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	3b1e      	subs	r3, #30
 8001c16:	2207      	movs	r2, #7
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	400a      	ands	r2, r1
 8001c24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68d9      	ldr	r1, [r3, #12]
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	4603      	mov	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4403      	add	r3, r0
 8001c3e:	3b1e      	subs	r3, #30
 8001c40:	409a      	lsls	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	e022      	b.n	8001c92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6919      	ldr	r1, [r3, #16]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	2207      	movs	r2, #7
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4403      	add	r3, r0
 8001c88:	409a      	lsls	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d824      	bhi.n	8001ce4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b05      	subs	r3, #5
 8001cac:	221f      	movs	r2, #31
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b05      	subs	r3, #5
 8001cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce2:	e04c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d824      	bhi.n	8001d36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b23      	subs	r3, #35	; 0x23
 8001cfe:	221f      	movs	r2, #31
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43da      	mvns	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	3b23      	subs	r3, #35	; 0x23
 8001d28:	fa00 f203 	lsl.w	r2, r0, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
 8001d34:	e023      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	3b41      	subs	r3, #65	; 0x41
 8001d48:	221f      	movs	r2, #31
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43da      	mvns	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	400a      	ands	r2, r1
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	4618      	mov	r0, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	3b41      	subs	r3, #65	; 0x41
 8001d72:	fa00 f203 	lsl.w	r2, r0, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <HAL_ADC_ConfigChannel+0x234>)
 8001d80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_ADC_ConfigChannel+0x238>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d109      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b12      	cmp	r3, #18
 8001d92:	d105      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a19      	ldr	r2, [pc, #100]	; (8001e0c <HAL_ADC_ConfigChannel+0x238>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d123      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d003      	beq.n	8001dba <HAL_ADC_ConfigChannel+0x1e6>
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2b11      	cmp	r3, #17
 8001db8:	d11b      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b10      	cmp	r3, #16
 8001dcc:	d111      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_ADC_ConfigChannel+0x23c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_ADC_ConfigChannel+0x240>)
 8001dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd8:	0c9a      	lsrs	r2, r3, #18
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	20000000 	.word	0x20000000
 8001e14:	431bde83 	.word	0x431bde83

08001e18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e20:	4b79      	ldr	r3, [pc, #484]	; (8002008 <ADC_Init+0x1f0>)
 8001e22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6859      	ldr	r1, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	021a      	lsls	r2, r3, #8
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6859      	ldr	r1, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68da      	ldr	r2, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	4a58      	ldr	r2, [pc, #352]	; (800200c <ADC_Init+0x1f4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d022      	beq.n	8001ef6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ebe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ee0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6899      	ldr	r1, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e00f      	b.n	8001f16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 0202 	bic.w	r2, r2, #2
 8001f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6899      	ldr	r1, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7e1b      	ldrb	r3, [r3, #24]
 8001f30:	005a      	lsls	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6859      	ldr	r1, [r3, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	035a      	lsls	r2, r3, #13
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	e007      	b.n	8001f8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	051a      	lsls	r2, r3, #20
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6899      	ldr	r1, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fce:	025a      	lsls	r2, r3, #9
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6899      	ldr	r1, [r3, #8]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	029a      	lsls	r2, r3, #10
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40012300 	.word	0x40012300
 800200c:	0f000001 	.word	0x0f000001

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	; (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	; (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	; (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	; 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ff4c 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002192:	f7ff ff61 	bl	8002058 <__NVIC_GetPriorityGrouping>
 8002196:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	6978      	ldr	r0, [r7, #20]
 800219e:	f7ff ffb1 	bl	8002104 <NVIC_EncodePriority>
 80021a2:	4602      	mov	r2, r0
 80021a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff ff80 	bl	80020b0 <__NVIC_SetPriority>
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ff54 	bl	8002074 <__NVIC_EnableIRQ>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021e0:	f7ff fca8 	bl	8001b34 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e099      	b.n	8002324 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2202      	movs	r2, #2
 80021f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002210:	e00f      	b.n	8002232 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002212:	f7ff fc8f 	bl	8001b34 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b05      	cmp	r3, #5
 800221e:	d908      	bls.n	8002232 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2203      	movs	r2, #3
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e078      	b.n	8002324 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e8      	bne.n	8002212 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4b38      	ldr	r3, [pc, #224]	; (800232c <HAL_DMA_Init+0x158>)
 800224c:	4013      	ands	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800226a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002276:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	2b04      	cmp	r3, #4
 800228a:	d107      	bne.n	800229c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	4313      	orrs	r3, r2
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0307 	bic.w	r3, r3, #7
 80022b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d117      	bne.n	80022f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00e      	beq.n	80022f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f9e9 	bl	80026b0 <DMA_CheckFifoParam>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2240      	movs	r2, #64	; 0x40
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022f2:	2301      	movs	r3, #1
 80022f4:	e016      	b.n	8002324 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f9a0 	bl	8002644 <DMA_CalcBaseAndBitshift>
 8002304:	4603      	mov	r3, r0
 8002306:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	223f      	movs	r2, #63	; 0x3f
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	f010803f 	.word	0xf010803f

08002330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800233c:	4b8e      	ldr	r3, [pc, #568]	; (8002578 <HAL_DMA_IRQHandler+0x248>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a8e      	ldr	r2, [pc, #568]	; (800257c <HAL_DMA_IRQHandler+0x24c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	2208      	movs	r2, #8
 800235c:	409a      	lsls	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01a      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0204 	bic.w	r2, r2, #4
 8002382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2208      	movs	r2, #8
 800238a:	409a      	lsls	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2201      	movs	r2, #1
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2201      	movs	r2, #1
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ca:	f043 0202 	orr.w	r2, r3, #2
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d6:	2204      	movs	r2, #4
 80023d8:	409a      	lsls	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d012      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f4:	2204      	movs	r2, #4
 80023f6:	409a      	lsls	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	f043 0204 	orr.w	r2, r3, #4
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240c:	2210      	movs	r2, #16
 800240e:	409a      	lsls	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4013      	ands	r3, r2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d043      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d03c      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2210      	movs	r2, #16
 800242c:	409a      	lsls	r2, r3
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d018      	beq.n	8002472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d108      	bne.n	8002460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d024      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	4798      	blx	r3
 800245e:	e01f      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01b      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	4798      	blx	r3
 8002470:	e016      	b.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d107      	bne.n	8002490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	2220      	movs	r2, #32
 80024a6:	409a      	lsls	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4013      	ands	r3, r2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 808f 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 8087 	beq.w	80025d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2220      	movs	r2, #32
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d136      	bne.n	8002548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0216 	bic.w	r2, r2, #22
 80024e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695a      	ldr	r2, [r3, #20]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_DMA_IRQHandler+0x1da>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0208 	bic.w	r2, r2, #8
 8002518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	223f      	movs	r2, #63	; 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07e      	beq.n	800263c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
        }
        return;
 8002546:	e079      	b.n	800263c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01d      	beq.n	8002592 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10d      	bne.n	8002580 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	2b00      	cmp	r3, #0
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4798      	blx	r3
 8002574:	e02c      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
 8002576:	bf00      	nop
 8002578:	20000000 	.word	0x20000000
 800257c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e01e      	b.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0210 	bic.w	r2, r2, #16
 80025ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d032      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d022      	beq.n	800262a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2205      	movs	r2, #5
 80025e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3301      	adds	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	d307      	bcc.n	8002618 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f2      	bne.n	80025fc <HAL_DMA_IRQHandler+0x2cc>
 8002616:	e000      	b.n	800261a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002618:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d005      	beq.n	800263e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	4798      	blx	r3
 800263a:	e000      	b.n	800263e <HAL_DMA_IRQHandler+0x30e>
        return;
 800263c:	bf00      	nop
    }
  }
}
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d909      	bls.n	8002686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	; 0x58
 8002684:	e007      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	080067ec 	.word	0x080067ec

080026b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d856      	bhi.n	800277e <DMA_CheckFifoParam+0xce>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <DMA_CheckFifoParam+0x28>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	080026e9 	.word	0x080026e9
 80026e4:	0800277f 	.word	0x0800277f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d046      	beq.n	8002782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e043      	b.n	8002782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002702:	d140      	bne.n	8002786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e03d      	b.n	8002786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d121      	bne.n	8002758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d837      	bhi.n	800278a <DMA_CheckFifoParam+0xda>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x70>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	08002731 	.word	0x08002731
 800272c:	08002749 	.word	0x08002749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e030      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d025      	beq.n	800278e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e022      	b.n	800278e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002756:	e01c      	b.n	8002792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d903      	bls.n	8002766 <DMA_CheckFifoParam+0xb6>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d003      	beq.n	800276c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002764:	e018      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      break;
 800276a:	e015      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00e      	beq.n	8002796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      break;
 800277c:	e00b      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 800277e:	bf00      	nop
 8002780:	e00a      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002782:	bf00      	nop
 8002784:	e008      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
 8002788:	e006      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278a:	bf00      	nop
 800278c:	e004      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 800278e:	bf00      	nop
 8002790:	e002      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;   
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <DMA_CheckFifoParam+0xe8>
      break;
 8002796:	bf00      	nop
    }
  } 
  
  return status; 
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e159      	b.n	8002a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c4:	2201      	movs	r2, #1
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	429a      	cmp	r2, r3
 80027de:	f040 8148 	bne.w	8002a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d005      	beq.n	80027fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d130      	bne.n	800285c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	43db      	mvns	r3, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4013      	ands	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002830:	2201      	movs	r2, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	091b      	lsrs	r3, r3, #4
 8002846:	f003 0201 	and.w	r2, r3, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d017      	beq.n	8002898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d123      	bne.n	80028ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	08da      	lsrs	r2, r3, #3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3208      	adds	r2, #8
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	220f      	movs	r2, #15
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	08da      	lsrs	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3208      	adds	r2, #8
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0203 	and.w	r2, r3, #3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80a2 	beq.w	8002a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	4b57      	ldr	r3, [pc, #348]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002936:	4a56      	ldr	r2, [pc, #344]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	4b54      	ldr	r3, [pc, #336]	; (8002a90 <HAL_GPIO_Init+0x2e8>)
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a52      	ldr	r2, [pc, #328]	; (8002a94 <HAL_GPIO_Init+0x2ec>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a49      	ldr	r2, [pc, #292]	; (8002a98 <HAL_GPIO_Init+0x2f0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d019      	beq.n	80029aa <HAL_GPIO_Init+0x202>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a48      	ldr	r2, [pc, #288]	; (8002a9c <HAL_GPIO_Init+0x2f4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d013      	beq.n	80029a6 <HAL_GPIO_Init+0x1fe>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a47      	ldr	r2, [pc, #284]	; (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d00d      	beq.n	80029a2 <HAL_GPIO_Init+0x1fa>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a46      	ldr	r2, [pc, #280]	; (8002aa4 <HAL_GPIO_Init+0x2fc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d007      	beq.n	800299e <HAL_GPIO_Init+0x1f6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a45      	ldr	r2, [pc, #276]	; (8002aa8 <HAL_GPIO_Init+0x300>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d101      	bne.n	800299a <HAL_GPIO_Init+0x1f2>
 8002996:	2304      	movs	r3, #4
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299a:	2307      	movs	r3, #7
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x204>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x204>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x2ec>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ee:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	; (8002aac <HAL_GPIO_Init+0x304>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a18:	4a24      	ldr	r2, [pc, #144]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a42:	4a1a      	ldr	r2, [pc, #104]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a6c:	4a0f      	ldr	r2, [pc, #60]	; (8002aac <HAL_GPIO_Init+0x304>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f aea2 	bls.w	80027c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40013c00 	.word	0x40013c00

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e12b      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fee8 	bl	80008e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	; 0x24
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 0201 	bic.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b48:	f000 fd80 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	4a81      	ldr	r2, [pc, #516]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d807      	bhi.n	8002b68 <HAL_I2C_Init+0x84>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_I2C_Init+0x278>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	bf94      	ite	ls
 8002b60:	2301      	movls	r3, #1
 8002b62:	2300      	movhi	r3, #0
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	e006      	b.n	8002b76 <HAL_I2C_Init+0x92>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a7d      	ldr	r2, [pc, #500]	; (8002d60 <HAL_I2C_Init+0x27c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf94      	ite	ls
 8002b70:	2301      	movls	r3, #1
 8002b72:	2300      	movhi	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0e7      	b.n	8002d4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a78      	ldr	r2, [pc, #480]	; (8002d64 <HAL_I2C_Init+0x280>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0c9b      	lsrs	r3, r3, #18
 8002b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a6a      	ldr	r2, [pc, #424]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_I2C_Init+0xd4>
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	e009      	b.n	8002bcc <HAL_I2C_Init+0xe8>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	4a69      	ldr	r2, [pc, #420]	; (8002d68 <HAL_I2C_Init+0x284>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	3301      	adds	r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	495c      	ldr	r1, [pc, #368]	; (8002d58 <HAL_I2C_Init+0x274>)
 8002be8:	428b      	cmp	r3, r1
 8002bea:	d819      	bhi.n	8002c20 <HAL_I2C_Init+0x13c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1e59      	subs	r1, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c00:	400b      	ands	r3, r1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_Init+0x138>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1a:	e051      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c1c:	2304      	movs	r3, #4
 8002c1e:	e04f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d111      	bne.n	8002c4c <HAL_I2C_Init+0x168>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	440b      	add	r3, r1
 8002c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e012      	b.n	8002c72 <HAL_I2C_Init+0x18e>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	0099      	lsls	r1, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Init+0x196>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e022      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10e      	bne.n	8002ca0 <HAL_I2C_Init+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1e58      	subs	r0, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	440b      	add	r3, r1
 8002c90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c9e:	e00f      	b.n	8002cc0 <HAL_I2C_Init+0x1dc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e58      	subs	r0, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6859      	ldr	r1, [r3, #4]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	0099      	lsls	r1, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6809      	ldr	r1, [r1, #0]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6911      	ldr	r1, [r2, #16]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68d2      	ldr	r2, [r2, #12]
 8002cfa:	4311      	orrs	r1, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	000186a0 	.word	0x000186a0
 8002d5c:	001e847f 	.word	0x001e847f
 8002d60:	003d08ff 	.word	0x003d08ff
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	10624dd3 	.word	0x10624dd3

08002d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e267      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d075      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x108>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e242      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x74>
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x98>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002e04:	4b69      	ldr	r3, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe fe86 	bl	8001b34 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe fe82 	bl	8001b34 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e207      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xc0>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fe72 	bl	8001b34 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fe6e 	bl	8001b34 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1f3      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xe8>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1c7      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4937      	ldr	r1, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e03a      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fe27 	bl	8001b34 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fe fe23 	bl	8001b34 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1a8      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fe06 	bl	8001b34 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fe02 	bl	8001b34 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e187      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d036      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fe fde6 	bl	8001b34 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fde2 	bl	8001b34 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e167      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fdcf 	bl	8001b34 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e00e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fe fdcb 	bl	8001b34 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d907      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e150      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ea      	bne.n	8002f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8097 	beq.w	8003100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fd8b 	bl	8001b34 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fd87 	bl	8001b34 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e10c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x2ea>
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x30c>
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5e      	ldr	r2, [pc, #376]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fe fd4c 	bl	8001b34 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fe fd48 	bl	8001b34 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0cb      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x334>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fe fd36 	bl	8001b34 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fe fd32 	bl	8001b34 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b5      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a1 	beq.w	800324c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d05c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d141      	bne.n	80031a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fe fd06 	bl	8001b34 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fe fd02 	bl	8001b34 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e087      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fcdb 	bl	8001b34 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fcd7 	bl	8001b34 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e05c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x416>
 80031a0:	e054      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fcc4 	bl	8001b34 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fcc0 	bl	8001b34 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x444>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d028      	beq.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d121      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe fbf2 	bl	8001b34 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fbee 	bl	8001b34 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd fcaa 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	080067d4 	.word	0x080067d4
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b094      	sub	sp, #80	; 0x50
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
 8003434:	2300      	movs	r3, #0
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	2300      	movs	r3, #0
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80e1 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e0db      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003460:	e0db      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b73      	ldr	r3, [pc, #460]	; (8003630 <HAL_RCC_GetSysClockFreq+0x208>)
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003466:	e0d8      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b6f      	ldr	r3, [pc, #444]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
 8003488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
 8003496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ac:	0150      	lsls	r0, r2, #5
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4621      	mov	r1, r4
 80034b4:	1a51      	subs	r1, r2, r1
 80034b6:	6139      	str	r1, [r7, #16]
 80034b8:	4629      	mov	r1, r5
 80034ba:	eb63 0301 	sbc.w	r3, r3, r1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034cc:	4659      	mov	r1, fp
 80034ce:	018b      	lsls	r3, r1, #6
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d6:	4651      	mov	r1, sl
 80034d8:	018a      	lsls	r2, r1, #6
 80034da:	4651      	mov	r1, sl
 80034dc:	ebb2 0801 	subs.w	r8, r2, r1
 80034e0:	4659      	mov	r1, fp
 80034e2:	eb63 0901 	sbc.w	r9, r3, r1
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fa:	4690      	mov	r8, r2
 80034fc:	4699      	mov	r9, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	eb18 0303 	adds.w	r3, r8, r3
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	462b      	mov	r3, r5
 8003508:	eb49 0303 	adc.w	r3, r9, r3
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800351a:	4629      	mov	r1, r5
 800351c:	024b      	lsls	r3, r1, #9
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003524:	4621      	mov	r1, r4
 8003526:	024a      	lsls	r2, r1, #9
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003538:	f7fc fe52 	bl	80001e0 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	e058      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	4618      	mov	r0, r3
 8003550:	4611      	mov	r1, r2
 8003552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003572:	0150      	lsls	r0, r2, #5
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4641      	mov	r1, r8
 800357a:	ebb2 0a01 	subs.w	sl, r2, r1
 800357e:	4649      	mov	r1, r9
 8003580:	eb63 0b01 	sbc.w	fp, r3, r1
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003598:	ebb2 040a 	subs.w	r4, r2, sl
 800359c:	eb63 050b 	sbc.w	r5, r3, fp
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	464b      	mov	r3, r9
 80035bc:	eb45 0303 	adc.w	r3, r5, r3
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ce:	4629      	mov	r1, r5
 80035d0:	028b      	lsls	r3, r1, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d8:	4621      	mov	r1, r4
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	61fa      	str	r2, [r7, #28]
 80035e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ec:	f7fc fdf8 	bl	80001e0 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800361c:	4618      	mov	r0, r3
 800361e:	3750      	adds	r7, #80	; 0x50
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	080067e4 	.word	0x080067e4

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003678:	f7ff ffdc 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0b5b      	lsrs	r3, r3, #13
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	080067e4 	.word	0x080067e4

0800369c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	220f      	movs	r2, #15
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCC_GetClockConfig+0x60>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e07b      	b.n	800380a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	2b00      	cmp	r3, #0
 8003718:	d108      	bne.n	800372c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003722:	d009      	beq.n	8003738 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	61da      	str	r2, [r3, #28]
 800372a:	e005      	b.n	8003738 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fa18 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800376e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037bc:	ea42 0103 	orr.w	r1, r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0104 	and.w	r1, r3, #4
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	f003 0210 	and.w	r2, r3, #16
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e041      	b.n	80038a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd fd9f 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 fc97 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e044      	b.n	8003952 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_TIM_Base_Start_IT+0xb0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d013      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_TIM_Base_Start_IT+0xb4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Base_Start_IT+0xb8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_Base_Start_IT+0xbc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_TIM_Base_Start_IT+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d010      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	e007      	b.n	8003950 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000

08003974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f839 	bl	8003a12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fbe6 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b082      	sub	sp, #8
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e041      	b.n	8003abc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f839 	bl	8003ac4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f000 fb8d 	bl	8004184 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d122      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d11b      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0202 	mvn.w	r2, #2
 8003b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fb13 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003b20:	e005      	b.n	8003b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fb05 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fb16 	bl	800415a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d122      	bne.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d11b      	bne.n	8003b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0204 	mvn.w	r2, #4
 8003b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 fae9 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003b74:	e005      	b.n	8003b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fadb 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 faec 	bl	800415a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d122      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d11b      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f06f 0208 	mvn.w	r2, #8
 8003bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2204      	movs	r2, #4
 8003bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fabf 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003bc8:	e005      	b.n	8003bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fab1 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fac2 	bl	800415a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0310 	and.w	r3, r3, #16
 8003be6:	2b10      	cmp	r3, #16
 8003be8:	d122      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d11b      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0210 	mvn.w	r2, #16
 8003c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2208      	movs	r2, #8
 8003c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fa95 	bl	8004146 <HAL_TIM_IC_CaptureCallback>
 8003c1c:	e005      	b.n	8003c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fa87 	bl	8004132 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa98 	bl	800415a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10e      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d107      	bne.n	8003c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0201 	mvn.w	r2, #1
 8003c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fc ff1a 	bl	8000a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b80      	cmp	r3, #128	; 0x80
 8003c68:	d10e      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	2b80      	cmp	r3, #128	; 0x80
 8003c76:	d107      	bne.n	8003c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 ff0c 	bl	8004aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d10e      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca0:	2b40      	cmp	r3, #64	; 0x40
 8003ca2:	d107      	bne.n	8003cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fa5d 	bl	800416e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f06f 0220 	mvn.w	r2, #32
 8003cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fed6 	bl	8004a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e088      	b.n	8003e18 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11b      	bne.n	8003d4c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f000 fc3a 	bl	800459c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020c 	bic.w	r2, r2, #12
 8003d36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6999      	ldr	r1, [r3, #24]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	619a      	str	r2, [r3, #24]
 8003d4a:	e060      	b.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d11c      	bne.n	8003d8c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f000 fcb2 	bl	80046ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699a      	ldr	r2, [r3, #24]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6999      	ldr	r1, [r3, #24]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	021a      	lsls	r2, r3, #8
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
 8003d8a:	e040      	b.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d11b      	bne.n	8003dca <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f000 fcff 	bl	80047a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 020c 	bic.w	r2, r2, #12
 8003db4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69d9      	ldr	r1, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	61da      	str	r2, [r3, #28]
 8003dc8:	e021      	b.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d11c      	bne.n	8003e0a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	6819      	ldr	r1, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fd1c 	bl	800481c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003df2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69d9      	ldr	r1, [r3, #28]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	021a      	lsls	r2, r3, #8
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
 8003e08:	e001      	b.n	8003e0e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0ae      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	f200 809f 	bhi.w	8003f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e89 	.word	0x08003e89
 8003e58:	08003f8d 	.word	0x08003f8d
 8003e5c:	08003f8d 	.word	0x08003f8d
 8003e60:	08003f8d 	.word	0x08003f8d
 8003e64:	08003ec9 	.word	0x08003ec9
 8003e68:	08003f8d 	.word	0x08003f8d
 8003e6c:	08003f8d 	.word	0x08003f8d
 8003e70:	08003f8d 	.word	0x08003f8d
 8003e74:	08003f0b 	.word	0x08003f0b
 8003e78:	08003f8d 	.word	0x08003f8d
 8003e7c:	08003f8d 	.word	0x08003f8d
 8003e80:	08003f8d 	.word	0x08003f8d
 8003e84:	08003f4b 	.word	0x08003f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f9f8 	bl	8004284 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699a      	ldr	r2, [r3, #24]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0208 	orr.w	r2, r2, #8
 8003ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	699a      	ldr	r2, [r3, #24]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0204 	bic.w	r2, r2, #4
 8003eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6999      	ldr	r1, [r3, #24]
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	619a      	str	r2, [r3, #24]
      break;
 8003ec6:	e064      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fa3e 	bl	8004350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6999      	ldr	r1, [r3, #24]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	021a      	lsls	r2, r3, #8
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	619a      	str	r2, [r3, #24]
      break;
 8003f08:	e043      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fa89 	bl	8004428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0208 	orr.w	r2, r2, #8
 8003f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0204 	bic.w	r2, r2, #4
 8003f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	61da      	str	r2, [r3, #28]
      break;
 8003f48:	e023      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 fad3 	bl	80044fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69da      	ldr	r2, [r3, #28]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	69da      	ldr	r2, [r3, #28]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69d9      	ldr	r1, [r3, #28]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	021a      	lsls	r2, r3, #8
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	61da      	str	r2, [r3, #28]
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e0b4      	b.n	800412a <HAL_TIM_ConfigClockSource+0x186>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d03e      	beq.n	8004078 <HAL_TIM_ConfigClockSource+0xd4>
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffe:	f200 8087 	bhi.w	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004006:	f000 8086 	beq.w	8004116 <HAL_TIM_ConfigClockSource+0x172>
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800400e:	d87f      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d01a      	beq.n	800404a <HAL_TIM_ConfigClockSource+0xa6>
 8004014:	2b70      	cmp	r3, #112	; 0x70
 8004016:	d87b      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004018:	2b60      	cmp	r3, #96	; 0x60
 800401a:	d050      	beq.n	80040be <HAL_TIM_ConfigClockSource+0x11a>
 800401c:	2b60      	cmp	r3, #96	; 0x60
 800401e:	d877      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004020:	2b50      	cmp	r3, #80	; 0x50
 8004022:	d03c      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xfa>
 8004024:	2b50      	cmp	r3, #80	; 0x50
 8004026:	d873      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	2b40      	cmp	r3, #64	; 0x40
 800402a:	d058      	beq.n	80040de <HAL_TIM_ConfigClockSource+0x13a>
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d86f      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004030:	2b30      	cmp	r3, #48	; 0x30
 8004032:	d064      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	2b30      	cmp	r3, #48	; 0x30
 8004036:	d86b      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d060      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x15a>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d867      	bhi.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d05c      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x15a>
 8004044:	2b10      	cmp	r3, #16
 8004046:	d05a      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x15a>
 8004048:	e062      	b.n	8004110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6899      	ldr	r1, [r3, #8]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f000 fc37 	bl	80048cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800406c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68ba      	ldr	r2, [r7, #8]
 8004074:	609a      	str	r2, [r3, #8]
      break;
 8004076:	e04f      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6899      	ldr	r1, [r3, #8]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f000 fc20 	bl	80048cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409a:	609a      	str	r2, [r3, #8]
      break;
 800409c:	e03c      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6859      	ldr	r1, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	461a      	mov	r2, r3
 80040ac:	f000 fade 	bl	800466c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2150      	movs	r1, #80	; 0x50
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fbed 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 80040bc:	e02c      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6859      	ldr	r1, [r3, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f000 fb3a 	bl	8004744 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2160      	movs	r1, #96	; 0x60
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 fbdd 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 80040dc:	e01c      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6859      	ldr	r1, [r3, #4]
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	461a      	mov	r2, r3
 80040ec:	f000 fabe 	bl	800466c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fbcd 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 80040fc:	e00c      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4619      	mov	r1, r3
 8004108:	4610      	mov	r0, r2
 800410a:	f000 fbc4 	bl	8004896 <TIM_ITRx_SetConfig>
      break;
 800410e:	e003      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	73fb      	strb	r3, [r7, #15]
      break;
 8004114:	e000      	b.n	8004118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004128:	7bfb      	ldrb	r3, [r7, #15]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004132:	b480      	push	{r7}
 8004134:	b083      	sub	sp, #12
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
	...

08004184 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a34      	ldr	r2, [pc, #208]	; (8004268 <TIM_Base_SetConfig+0xe4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0x38>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0x38>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a31      	ldr	r2, [pc, #196]	; (800426c <TIM_Base_SetConfig+0xe8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0x38>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a30      	ldr	r2, [pc, #192]	; (8004270 <TIM_Base_SetConfig+0xec>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0x38>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	; (8004274 <TIM_Base_SetConfig+0xf0>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <TIM_Base_SetConfig+0xe4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d01b      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041dc:	d017      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a22      	ldr	r2, [pc, #136]	; (800426c <TIM_Base_SetConfig+0xe8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d013      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a21      	ldr	r2, [pc, #132]	; (8004270 <TIM_Base_SetConfig+0xec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00f      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a20      	ldr	r2, [pc, #128]	; (8004274 <TIM_Base_SetConfig+0xf0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d00b      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <TIM_Base_SetConfig+0xf4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d007      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a1e      	ldr	r2, [pc, #120]	; (800427c <TIM_Base_SetConfig+0xf8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d003      	beq.n	800420e <TIM_Base_SetConfig+0x8a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1d      	ldr	r2, [pc, #116]	; (8004280 <TIM_Base_SetConfig+0xfc>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d108      	bne.n	8004220 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004214:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a08      	ldr	r2, [pc, #32]	; (8004268 <TIM_Base_SetConfig+0xe4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d103      	bne.n	8004254 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	615a      	str	r2, [r3, #20]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40014400 	.word	0x40014400
 8004280:	40014800 	.word	0x40014800

08004284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f023 0201 	bic.w	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f023 0303 	bic.w	r3, r3, #3
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0302 	bic.w	r3, r3, #2
 80042cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1c      	ldr	r2, [pc, #112]	; (800434c <TIM_OC1_SetConfig+0xc8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d10c      	bne.n	80042fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0308 	bic.w	r3, r3, #8
 80042e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f023 0304 	bic.w	r3, r3, #4
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a13      	ldr	r2, [pc, #76]	; (800434c <TIM_OC1_SetConfig+0xc8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d111      	bne.n	8004326 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	621a      	str	r2, [r3, #32]
}
 8004340:	bf00      	nop
 8004342:	371c      	adds	r7, #28
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	40010000 	.word	0x40010000

08004350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f023 0210 	bic.w	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f023 0320 	bic.w	r3, r3, #32
 800439a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <TIM_OC2_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d10d      	bne.n	80043cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a15      	ldr	r2, [pc, #84]	; (8004424 <TIM_OC2_SetConfig+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d113      	bne.n	80043fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	621a      	str	r2, [r3, #32]
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	40010000 	.word	0x40010000

08004428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	4313      	orrs	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <TIM_OC3_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10d      	bne.n	80044a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800448c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a14      	ldr	r2, [pc, #80]	; (80044f8 <TIM_OC3_SetConfig+0xd0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d113      	bne.n	80044d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	621a      	str	r2, [r3, #32]
}
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	40010000 	.word	0x40010000

080044fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a10      	ldr	r2, [pc, #64]	; (8004598 <TIM_OC4_SetConfig+0x9c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d109      	bne.n	8004570 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	019b      	lsls	r3, r3, #6
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000

0800459c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800459c:	b480      	push	{r7}
 800459e:	b087      	sub	sp, #28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	f023 0201 	bic.w	r2, r3, #1
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a24      	ldr	r2, [pc, #144]	; (8004658 <TIM_TI1_SetConfig+0xbc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d013      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d00f      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a21      	ldr	r2, [pc, #132]	; (800465c <TIM_TI1_SetConfig+0xc0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	; (8004660 <TIM_TI1_SetConfig+0xc4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d007      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <TIM_TI1_SetConfig+0xc8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_TI1_SetConfig+0x56>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <TIM_TI1_SetConfig+0xcc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d101      	bne.n	80045f6 <TIM_TI1_SetConfig+0x5a>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <TIM_TI1_SetConfig+0x5c>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	e003      	b.n	8004616 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f043 0301 	orr.w	r3, r3, #1
 8004614:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800461c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	b2db      	uxtb	r3, r3
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f023 030a 	bic.w	r3, r3, #10
 8004630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f003 030a 	and.w	r3, r3, #10
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	4313      	orrs	r3, r2
 800463c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000

0800466c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	f023 0201 	bic.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f023 030a 	bic.w	r3, r3, #10
 80046a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b087      	sub	sp, #28
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	f023 0210 	bic.w	r2, r3, #16
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	031b      	lsls	r3, r3, #12
 800470e:	b29b      	uxth	r3, r3
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800471c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004744:	b480      	push	{r7}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0210 	bic.w	r2, r3, #16
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800476e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	031b      	lsls	r3, r3, #12
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004780:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 0303 	bic.w	r3, r3, #3
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80047f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	021b      	lsls	r3, r3, #8
 80047fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	621a      	str	r2, [r3, #32]
}
 8004810:	bf00      	nop
 8004812:	371c      	adds	r7, #28
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004848:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	021b      	lsls	r3, r3, #8
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800485a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	031b      	lsls	r3, r3, #12
 8004860:	b29b      	uxth	r3, r3
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800486e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	031b      	lsls	r3, r3, #12
 8004874:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f043 0307 	orr.w	r3, r3, #7
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e050      	b.n	80049c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d018      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004970:	d013      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00e      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a16      	ldr	r2, [pc, #88]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d009      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a15      	ldr	r2, [pc, #84]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10c      	bne.n	80049b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40000400 	.word	0x40000400
 80049dc:	40000800 	.word	0x40000800
 80049e0:	40000c00 	.word	0x40000c00
 80049e4:	40014000 	.word	0x40014000

080049e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e03d      	b.n	8004a80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e03f      	b.n	8004b46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc fef8 	bl	80018d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2224      	movs	r2, #36	; 0x24
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f829 	bl	8004b50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b0c0      	sub	sp, #256	; 0x100
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	ea40 0301 	orr.w	r3, r0, r1
 8004b78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004ba8:	f021 010c 	bic.w	r1, r1, #12
 8004bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bca:	6999      	ldr	r1, [r3, #24]
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	ea40 0301 	orr.w	r3, r0, r1
 8004bd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b8f      	ldr	r3, [pc, #572]	; (8004e1c <UART_SetConfig+0x2cc>)
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d005      	beq.n	8004bf0 <UART_SetConfig+0xa0>
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b8d      	ldr	r3, [pc, #564]	; (8004e20 <UART_SetConfig+0x2d0>)
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d104      	bne.n	8004bfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe fd40 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bf8:	e003      	b.n	8004c02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7fe fd27 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 8004bfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0c:	f040 810c 	bne.w	8004e28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c22:	4622      	mov	r2, r4
 8004c24:	462b      	mov	r3, r5
 8004c26:	1891      	adds	r1, r2, r2
 8004c28:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c2a:	415b      	adcs	r3, r3
 8004c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c32:	4621      	mov	r1, r4
 8004c34:	eb12 0801 	adds.w	r8, r2, r1
 8004c38:	4629      	mov	r1, r5
 8004c3a:	eb43 0901 	adc.w	r9, r3, r1
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c52:	4690      	mov	r8, r2
 8004c54:	4699      	mov	r9, r3
 8004c56:	4623      	mov	r3, r4
 8004c58:	eb18 0303 	adds.w	r3, r8, r3
 8004c5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c60:	462b      	mov	r3, r5
 8004c62:	eb49 0303 	adc.w	r3, r9, r3
 8004c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c7e:	460b      	mov	r3, r1
 8004c80:	18db      	adds	r3, r3, r3
 8004c82:	653b      	str	r3, [r7, #80]	; 0x50
 8004c84:	4613      	mov	r3, r2
 8004c86:	eb42 0303 	adc.w	r3, r2, r3
 8004c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c94:	f7fb faa4 	bl	80001e0 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b61      	ldr	r3, [pc, #388]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	011c      	lsls	r4, r3, #4
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cc8:	4641      	mov	r1, r8
 8004cca:	eb12 0a01 	adds.w	sl, r2, r1
 8004cce:	4649      	mov	r1, r9
 8004cd0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce8:	4692      	mov	sl, r2
 8004cea:	469b      	mov	fp, r3
 8004cec:	4643      	mov	r3, r8
 8004cee:	eb1a 0303 	adds.w	r3, sl, r3
 8004cf2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d14:	460b      	mov	r3, r1
 8004d16:	18db      	adds	r3, r3, r3
 8004d18:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	eb42 0303 	adc.w	r3, r2, r3
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
 8004d22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d2a:	f7fb fa59 	bl	80001e0 <__aeabi_uldivmod>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4611      	mov	r1, r2
 8004d34:	4b3b      	ldr	r3, [pc, #236]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d36:	fba3 2301 	umull	r2, r3, r3, r1
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2264      	movs	r2, #100	; 0x64
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	1acb      	subs	r3, r1, r3
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004d4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d58:	441c      	add	r4, r3
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d74:	415b      	adcs	r3, r3
 8004d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6339      	str	r1, [r7, #48]	; 0x30
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004dc8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004dcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	18db      	adds	r3, r3, r3
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	eb42 0303 	adc.w	r3, r2, r3
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004de2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004de6:	f7fb f9fb 	bl	80001e0 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	2164      	movs	r1, #100	; 0x64
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	3332      	adds	r3, #50	; 0x32
 8004e02:	4a08      	ldr	r2, [pc, #32]	; (8004e24 <UART_SetConfig+0x2d4>)
 8004e04:	fba2 2303 	umull	r2, r3, r2, r3
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	f003 0207 	and.w	r2, r3, #7
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4422      	add	r2, r4
 8004e16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e18:	e105      	b.n	8005026 <UART_SetConfig+0x4d6>
 8004e1a:	bf00      	nop
 8004e1c:	40011000 	.word	0x40011000
 8004e20:	40011400 	.word	0x40011400
 8004e24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	1891      	adds	r1, r2, r2
 8004e40:	6239      	str	r1, [r7, #32]
 8004e42:	415b      	adcs	r3, r3
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e4a:	4641      	mov	r1, r8
 8004e4c:	1854      	adds	r4, r2, r1
 8004e4e:	4649      	mov	r1, r9
 8004e50:	eb43 0501 	adc.w	r5, r3, r1
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	00eb      	lsls	r3, r5, #3
 8004e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e62:	00e2      	lsls	r2, r4, #3
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	18e3      	adds	r3, r4, r3
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e70:	464b      	mov	r3, r9
 8004e72:	eb45 0303 	adc.w	r3, r5, r3
 8004e76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e96:	4629      	mov	r1, r5
 8004e98:	008b      	lsls	r3, r1, #2
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	008a      	lsls	r2, r1, #2
 8004ea4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ea8:	f7fb f99a 	bl	80001e0 <__aeabi_uldivmod>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4b60      	ldr	r3, [pc, #384]	; (8005034 <UART_SetConfig+0x4e4>)
 8004eb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	011c      	lsls	r4, r3, #4
 8004eba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ec4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ec8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	61b9      	str	r1, [r7, #24]
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6139      	str	r1, [r7, #16]
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f10:	464b      	mov	r3, r9
 8004f12:	460a      	mov	r2, r1
 8004f14:	eb42 0303 	adc.w	r3, r2, r3
 8004f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f34:	4649      	mov	r1, r9
 8004f36:	008b      	lsls	r3, r1, #2
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3e:	4641      	mov	r1, r8
 8004f40:	008a      	lsls	r2, r1, #2
 8004f42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f46:	f7fb f94b 	bl	80001e0 <__aeabi_uldivmod>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f50:	fba3 1302 	umull	r1, r3, r3, r2
 8004f54:	095b      	lsrs	r3, r3, #5
 8004f56:	2164      	movs	r1, #100	; 0x64
 8004f58:	fb01 f303 	mul.w	r3, r1, r3
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	3332      	adds	r3, #50	; 0x32
 8004f62:	4a34      	ldr	r2, [pc, #208]	; (8005034 <UART_SetConfig+0x4e4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f6e:	441c      	add	r4, r3
 8004f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f74:	2200      	movs	r2, #0
 8004f76:	673b      	str	r3, [r7, #112]	; 0x70
 8004f78:	677a      	str	r2, [r7, #116]	; 0x74
 8004f7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f7e:	4642      	mov	r2, r8
 8004f80:	464b      	mov	r3, r9
 8004f82:	1891      	adds	r1, r2, r2
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	415b      	adcs	r3, r3
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f8e:	4641      	mov	r1, r8
 8004f90:	1851      	adds	r1, r2, r1
 8004f92:	6039      	str	r1, [r7, #0]
 8004f94:	4649      	mov	r1, r9
 8004f96:	414b      	adcs	r3, r1
 8004f98:	607b      	str	r3, [r7, #4]
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	00cb      	lsls	r3, r1, #3
 8004faa:	4651      	mov	r1, sl
 8004fac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	00ca      	lsls	r2, r1, #3
 8004fb4:	4610      	mov	r0, r2
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4642      	mov	r2, r8
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc0:	464b      	mov	r3, r9
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	eb42 0303 	adc.w	r3, r2, r3
 8004fc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	663b      	str	r3, [r7, #96]	; 0x60
 8004fd4:	667a      	str	r2, [r7, #100]	; 0x64
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fec:	4641      	mov	r1, r8
 8004fee:	008a      	lsls	r2, r1, #2
 8004ff0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ff4:	f7fb f8f4 	bl	80001e0 <__aeabi_uldivmod>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	; (8005034 <UART_SetConfig+0x4e4>)
 8004ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8005002:	095b      	lsrs	r3, r3, #5
 8005004:	2164      	movs	r1, #100	; 0x64
 8005006:	fb01 f303 	mul.w	r3, r1, r3
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	3332      	adds	r3, #50	; 0x32
 8005010:	4a08      	ldr	r2, [pc, #32]	; (8005034 <UART_SetConfig+0x4e4>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	f003 020f 	and.w	r2, r3, #15
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4422      	add	r2, r4
 8005024:	609a      	str	r2, [r3, #8]
}
 8005026:	bf00      	nop
 8005028:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005032:	bf00      	nop
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <_Z41__static_initialization_and_destruction_0ii>:
                destinationBuffer, DSHOT_DMA_BUFFER_SIZE);
}

void PWMChannel::dshotEnableDMARequests(PWMPinConfig dshotConfig) {
  __HAL_TIM_ENABLE_DMA(dshotConfig.timer, dshotConfig.timDMASource);
}
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d127      	bne.n	8005098 <_Z41__static_initialization_and_destruction_0ii+0x60>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800504e:	4293      	cmp	r3, r2
 8005050:	d122      	bne.n	8005098 <_Z41__static_initialization_and_destruction_0ii+0x60>
    {PWM4_Pin, PWM4_GPIO_Port, PWM_TIM, TIM_CHANNEL_4, false, {0}, 0, 0}};
 8005052:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a14      	ldr	r2, [pc, #80]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005058:	6093      	str	r3, [r2, #8]
 800505a:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005060:	6213      	str	r3, [r2, #32]
 8005062:	4b10      	ldr	r3, [pc, #64]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a10      	ldr	r2, [pc, #64]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005068:	6393      	str	r3, [r2, #56]	; 0x38
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005070:	6513      	str	r3, [r2, #80]	; 0x50
 8005072:	4b0e      	ldr	r3, [pc, #56]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a0c      	ldr	r2, [pc, #48]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005078:	6693      	str	r3, [r2, #104]	; 0x68
 800507a:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800508a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005094:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	20000010 	.word	0x20000010
 80050a8:	20000014 	.word	0x20000014
 80050ac:	2000000c 	.word	0x2000000c

080050b0 <_GLOBAL__sub_I_PWM_TIM>:
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050b8:	2001      	movs	r0, #1
 80050ba:	f7ff ffbd 	bl	8005038 <_Z41__static_initialization_and_destruction_0ii>
 80050be:	bd80      	pop	{r7, pc}

080050c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050ca:	2300      	movs	r3, #0
 80050cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d2:	2b84      	cmp	r3, #132	; 0x84
 80050d4:	d005      	beq.n	80050e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	3303      	adds	r3, #3
 80050e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050e2:	68fb      	ldr	r3, [r7, #12]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050f4:	f000 faf6 	bl	80056e4 <vTaskStartScheduler>
  
  return osOK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	bd80      	pop	{r7, pc}

080050fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005100:	b089      	sub	sp, #36	; 0x24
 8005102:	af04      	add	r7, sp, #16
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <osThreadCreate+0x54>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01c      	beq.n	8005152 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685c      	ldr	r4, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681d      	ldr	r5, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691e      	ldr	r6, [r3, #16]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ffc8 	bl	80050c0 <makeFreeRtosPriority>
 8005130:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800513a:	9202      	str	r2, [sp, #8]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	9100      	str	r1, [sp, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	4632      	mov	r2, r6
 8005144:	4629      	mov	r1, r5
 8005146:	4620      	mov	r0, r4
 8005148:	f000 f8ed 	bl	8005326 <xTaskCreateStatic>
 800514c:	4603      	mov	r3, r0
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e01c      	b.n	800518c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685c      	ldr	r4, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515e:	b29e      	uxth	r6, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff ffaa 	bl	80050c0 <makeFreeRtosPriority>
 800516c:	4602      	mov	r2, r0
 800516e:	f107 030c 	add.w	r3, r7, #12
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	9200      	str	r2, [sp, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	4632      	mov	r2, r6
 800517a:	4629      	mov	r1, r5
 800517c:	4620      	mov	r0, r4
 800517e:	f000 f92f 	bl	80053e0 <xTaskCreate>
 8005182:	4603      	mov	r3, r0
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800518c:	68fb      	ldr	r3, [r7, #12]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005196 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <osDelay+0x16>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	e000      	b.n	80051ae <osDelay+0x18>
 80051ac:	2301      	movs	r3, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa64 	bl	800567c <vTaskDelay>
  
  return osOK;
 80051b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f103 0208 	add.w	r2, r3, #8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 0208 	add.w	r2, r3, #8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f103 0208 	add.w	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005276:	d103      	bne.n	8005280 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e00c      	b.n	800529a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3308      	adds	r3, #8
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e002      	b.n	800528e <vListInsert+0x2e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d2f6      	bcs.n	8005288 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	601a      	str	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d103      	bne.n	8005306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005326:	b580      	push	{r7, lr}
 8005328:	b08e      	sub	sp, #56	; 0x38
 800532a:	af04      	add	r7, sp, #16
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800534c:	bf00      	nop
 800534e:	e7fe      	b.n	800534e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10a      	bne.n	800536c <xTaskCreateStatic+0x46>
	__asm volatile
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	61fb      	str	r3, [r7, #28]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800536c:	23b4      	movs	r3, #180	; 0xb4
 800536e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	2bb4      	cmp	r3, #180	; 0xb4
 8005374:	d00a      	beq.n	800538c <xTaskCreateStatic+0x66>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	61bb      	str	r3, [r7, #24]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800538c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01e      	beq.n	80053d2 <xTaskCreateStatic+0xac>
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	2b00      	cmp	r3, #0
 8005398:	d01b      	beq.n	80053d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ac:	2300      	movs	r3, #0
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b2:	9302      	str	r3, [sp, #8]
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 f851 	bl	800546c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053cc:	f000 f8ec 	bl	80055a8 <prvAddNewTaskToReadyList>
 80053d0:	e001      	b.n	80053d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d6:	697b      	ldr	r3, [r7, #20]
	}
 80053d8:	4618      	mov	r0, r3
 80053da:	3728      	adds	r7, #40	; 0x28
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08c      	sub	sp, #48	; 0x30
 80053e4:	af04      	add	r7, sp, #16
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4613      	mov	r3, r2
 80053ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 feef 	bl	80061d8 <pvPortMalloc>
 80053fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00e      	beq.n	8005420 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005402:	20b4      	movs	r0, #180	; 0xb4
 8005404:	f000 fee8 	bl	80061d8 <pvPortMalloc>
 8005408:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
 8005416:	e005      	b.n	8005424 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005418:	6978      	ldr	r0, [r7, #20]
 800541a:	f000 ffa9 	bl	8006370 <vPortFree>
 800541e:	e001      	b.n	8005424 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d017      	beq.n	800545a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	2300      	movs	r3, #0
 8005436:	9303      	str	r3, [sp, #12]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	9302      	str	r3, [sp, #8]
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	9301      	str	r3, [sp, #4]
 8005440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f80f 	bl	800546c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544e:	69f8      	ldr	r0, [r7, #28]
 8005450:	f000 f8aa 	bl	80055a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005454:	2301      	movs	r3, #1
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	e002      	b.n	8005460 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800545e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005460:	69bb      	ldr	r3, [r7, #24]
	}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005484:	3b01      	subs	r3, #1
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	f023 0307 	bic.w	r3, r3, #7
 8005492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	617b      	str	r3, [r7, #20]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d01f      	beq.n	80054fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
 80054be:	e012      	b.n	80054e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	4413      	add	r3, r2
 80054c6:	7819      	ldrb	r1, [r3, #0]
 80054c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	3334      	adds	r3, #52	; 0x34
 80054d0:	460a      	mov	r2, r1
 80054d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d006      	beq.n	80054ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3301      	adds	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	2b0f      	cmp	r3, #15
 80054ea:	d9e9      	bls.n	80054c0 <prvInitialiseNewTask+0x54>
 80054ec:	e000      	b.n	80054f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80054ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f8:	e003      	b.n	8005502 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	2b06      	cmp	r3, #6
 8005506:	d901      	bls.n	800550c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005508:	2306      	movs	r3, #6
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005510:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005516:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	2200      	movs	r2, #0
 800551c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	3304      	adds	r3, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fe6b 	bl	80051fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	3318      	adds	r3, #24
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fe66 	bl	80051fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005536:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553a:	f1c3 0207 	rsb	r2, r3, #7
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005546:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	2200      	movs	r2, #0
 8005554:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	334c      	adds	r3, #76	; 0x4c
 800555c:	2260      	movs	r2, #96	; 0x60
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f001 f849 	bl	80065f8 <memset>
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	4a0c      	ldr	r2, [pc, #48]	; (800559c <prvInitialiseNewTask+0x130>)
 800556a:	651a      	str	r2, [r3, #80]	; 0x50
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <prvInitialiseNewTask+0x134>)
 8005570:	655a      	str	r2, [r3, #84]	; 0x54
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	4a0b      	ldr	r2, [pc, #44]	; (80055a4 <prvInitialiseNewTask+0x138>)
 8005576:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	69b8      	ldr	r0, [r7, #24]
 800557e:	f000 fc1f 	bl	8005dc0 <pxPortInitialiseStack>
 8005582:	4602      	mov	r2, r0
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800558e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005592:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005594:	bf00      	nop
 8005596:	3720      	adds	r7, #32
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	08006814 	.word	0x08006814
 80055a0:	08006834 	.word	0x08006834
 80055a4:	080067f4 	.word	0x080067f4

080055a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055b0:	f000 fd30 	bl	8006014 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055b4:	4b2a      	ldr	r3, [pc, #168]	; (8005660 <prvAddNewTaskToReadyList+0xb8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	4a29      	ldr	r2, [pc, #164]	; (8005660 <prvAddNewTaskToReadyList+0xb8>)
 80055bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055be:	4b29      	ldr	r3, [pc, #164]	; (8005664 <prvAddNewTaskToReadyList+0xbc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055c6:	4a27      	ldr	r2, [pc, #156]	; (8005664 <prvAddNewTaskToReadyList+0xbc>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055cc:	4b24      	ldr	r3, [pc, #144]	; (8005660 <prvAddNewTaskToReadyList+0xb8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d110      	bne.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055d4:	f000 facc 	bl	8005b70 <prvInitialiseTaskLists>
 80055d8:	e00d      	b.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055da:	4b23      	ldr	r3, [pc, #140]	; (8005668 <prvAddNewTaskToReadyList+0xc0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d109      	bne.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055e2:	4b20      	ldr	r3, [pc, #128]	; (8005664 <prvAddNewTaskToReadyList+0xbc>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d802      	bhi.n	80055f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055f0:	4a1c      	ldr	r2, [pc, #112]	; (8005664 <prvAddNewTaskToReadyList+0xbc>)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055f6:	4b1d      	ldr	r3, [pc, #116]	; (800566c <prvAddNewTaskToReadyList+0xc4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	3301      	adds	r3, #1
 80055fc:	4a1b      	ldr	r2, [pc, #108]	; (800566c <prvAddNewTaskToReadyList+0xc4>)
 80055fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	2201      	movs	r2, #1
 8005606:	409a      	lsls	r2, r3
 8005608:	4b19      	ldr	r3, [pc, #100]	; (8005670 <prvAddNewTaskToReadyList+0xc8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4313      	orrs	r3, r2
 800560e:	4a18      	ldr	r2, [pc, #96]	; (8005670 <prvAddNewTaskToReadyList+0xc8>)
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4a15      	ldr	r2, [pc, #84]	; (8005674 <prvAddNewTaskToReadyList+0xcc>)
 8005620:	441a      	add	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f7ff fdf5 	bl	8005218 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800562e:	f000 fd21 	bl	8006074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005632:	4b0d      	ldr	r3, [pc, #52]	; (8005668 <prvAddNewTaskToReadyList+0xc0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800563a:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <prvAddNewTaskToReadyList+0xbc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	429a      	cmp	r2, r3
 8005646:	d207      	bcs.n	8005658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005648:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <prvAddNewTaskToReadyList+0xd0>)
 800564a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000b64 	.word	0x20000b64
 8005664:	20000a64 	.word	0x20000a64
 8005668:	20000b70 	.word	0x20000b70
 800566c:	20000b80 	.word	0x20000b80
 8005670:	20000b6c 	.word	0x20000b6c
 8005674:	20000a68 	.word	0x20000a68
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d017      	beq.n	80056be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <vTaskDelay+0x60>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <vTaskDelay+0x30>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056ac:	f000 f884 	bl	80057b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056b0:	2100      	movs	r1, #0
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 fb1e 	bl	8005cf4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056b8:	f000 f88c 	bl	80057d4 <xTaskResumeAll>
 80056bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d107      	bne.n	80056d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056c4:	4b06      	ldr	r3, [pc, #24]	; (80056e0 <vTaskDelay+0x64>)
 80056c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	20000b8c 	.word	0x20000b8c
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	; 0x28
 80056e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056f2:	463a      	mov	r2, r7
 80056f4:	1d39      	adds	r1, r7, #4
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fa ffdc 	bl	80006b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	9202      	str	r2, [sp, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	2300      	movs	r3, #0
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	460a      	mov	r2, r1
 8005712:	4921      	ldr	r1, [pc, #132]	; (8005798 <vTaskStartScheduler+0xb4>)
 8005714:	4821      	ldr	r0, [pc, #132]	; (800579c <vTaskStartScheduler+0xb8>)
 8005716:	f7ff fe06 	bl	8005326 <xTaskCreateStatic>
 800571a:	4603      	mov	r3, r0
 800571c:	4a20      	ldr	r2, [pc, #128]	; (80057a0 <vTaskStartScheduler+0xbc>)
 800571e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005720:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <vTaskStartScheduler+0xbc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e001      	b.n	8005732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d11b      	bne.n	8005770 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	613b      	str	r3, [r7, #16]
}
 800574a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800574c:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <vTaskStartScheduler+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	334c      	adds	r3, #76	; 0x4c
 8005752:	4a15      	ldr	r2, [pc, #84]	; (80057a8 <vTaskStartScheduler+0xc4>)
 8005754:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005756:	4b15      	ldr	r3, [pc, #84]	; (80057ac <vTaskStartScheduler+0xc8>)
 8005758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800575c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800575e:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <vTaskStartScheduler+0xcc>)
 8005760:	2201      	movs	r2, #1
 8005762:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005764:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <vTaskStartScheduler+0xd0>)
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800576a:	f000 fbb1 	bl	8005ed0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800576e:	e00e      	b.n	800578e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005776:	d10a      	bne.n	800578e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	60fb      	str	r3, [r7, #12]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <vTaskStartScheduler+0xa8>
}
 800578e:	bf00      	nop
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	080067cc 	.word	0x080067cc
 800579c:	08005b41 	.word	0x08005b41
 80057a0:	20000b88 	.word	0x20000b88
 80057a4:	20000a64 	.word	0x20000a64
 80057a8:	20000108 	.word	0x20000108
 80057ac:	20000b84 	.word	0x20000b84
 80057b0:	20000b70 	.word	0x20000b70
 80057b4:	20000b68 	.word	0x20000b68

080057b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <vTaskSuspendAll+0x18>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	4a03      	ldr	r2, [pc, #12]	; (80057d0 <vTaskSuspendAll+0x18>)
 80057c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000b8c 	.word	0x20000b8c

080057d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057e2:	4b41      	ldr	r3, [pc, #260]	; (80058e8 <xTaskResumeAll+0x114>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10a      	bne.n	8005800 <xTaskResumeAll+0x2c>
	__asm volatile
 80057ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ee:	f383 8811 	msr	BASEPRI, r3
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	f3bf 8f4f 	dsb	sy
 80057fa:	603b      	str	r3, [r7, #0]
}
 80057fc:	bf00      	nop
 80057fe:	e7fe      	b.n	80057fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005800:	f000 fc08 	bl	8006014 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005804:	4b38      	ldr	r3, [pc, #224]	; (80058e8 <xTaskResumeAll+0x114>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	4a37      	ldr	r2, [pc, #220]	; (80058e8 <xTaskResumeAll+0x114>)
 800580c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580e:	4b36      	ldr	r3, [pc, #216]	; (80058e8 <xTaskResumeAll+0x114>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d161      	bne.n	80058da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005816:	4b35      	ldr	r3, [pc, #212]	; (80058ec <xTaskResumeAll+0x118>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d05d      	beq.n	80058da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800581e:	e02e      	b.n	800587e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <xTaskResumeAll+0x11c>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3318      	adds	r3, #24
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff fd50 	bl	80052d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff fd4b 	bl	80052d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	2201      	movs	r2, #1
 8005842:	409a      	lsls	r2, r3
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <xTaskResumeAll+0x120>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4313      	orrs	r3, r2
 800584a:	4a2a      	ldr	r2, [pc, #168]	; (80058f4 <xTaskResumeAll+0x120>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a27      	ldr	r2, [pc, #156]	; (80058f8 <xTaskResumeAll+0x124>)
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7ff fcd7 	bl	8005218 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <xTaskResumeAll+0x128>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005878:	4b21      	ldr	r3, [pc, #132]	; (8005900 <xTaskResumeAll+0x12c>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <xTaskResumeAll+0x11c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1cc      	bne.n	8005820 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800588c:	f000 fa12 	bl	8005cb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <xTaskResumeAll+0x130>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800589c:	f000 f836 	bl	800590c <xTaskIncrementTick>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80058a6:	4b16      	ldr	r3, [pc, #88]	; (8005900 <xTaskResumeAll+0x12c>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f1      	bne.n	800589c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <xTaskResumeAll+0x130>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <xTaskResumeAll+0x12c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <xTaskResumeAll+0x134>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f000 fbcb 	bl	8006074 <vPortExitCritical>

	return xAlreadyYielded;
 80058de:	68bb      	ldr	r3, [r7, #8]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000b8c 	.word	0x20000b8c
 80058ec:	20000b64 	.word	0x20000b64
 80058f0:	20000b24 	.word	0x20000b24
 80058f4:	20000b6c 	.word	0x20000b6c
 80058f8:	20000a68 	.word	0x20000a68
 80058fc:	20000a64 	.word	0x20000a64
 8005900:	20000b78 	.word	0x20000b78
 8005904:	20000b74 	.word	0x20000b74
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005916:	4b4e      	ldr	r3, [pc, #312]	; (8005a50 <xTaskIncrementTick+0x144>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 808e 	bne.w	8005a3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005920:	4b4c      	ldr	r3, [pc, #304]	; (8005a54 <xTaskIncrementTick+0x148>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3301      	adds	r3, #1
 8005926:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005928:	4a4a      	ldr	r2, [pc, #296]	; (8005a54 <xTaskIncrementTick+0x148>)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d120      	bne.n	8005976 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005934:	4b48      	ldr	r3, [pc, #288]	; (8005a58 <xTaskIncrementTick+0x14c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <xTaskIncrementTick+0x48>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	603b      	str	r3, [r7, #0]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <xTaskIncrementTick+0x46>
 8005954:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <xTaskIncrementTick+0x14c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	4b40      	ldr	r3, [pc, #256]	; (8005a5c <xTaskIncrementTick+0x150>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a3e      	ldr	r2, [pc, #248]	; (8005a58 <xTaskIncrementTick+0x14c>)
 8005960:	6013      	str	r3, [r2, #0]
 8005962:	4a3e      	ldr	r2, [pc, #248]	; (8005a5c <xTaskIncrementTick+0x150>)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <xTaskIncrementTick+0x154>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	4a3c      	ldr	r2, [pc, #240]	; (8005a60 <xTaskIncrementTick+0x154>)
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	f000 f99f 	bl	8005cb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <xTaskIncrementTick+0x158>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	429a      	cmp	r2, r3
 800597e:	d348      	bcc.n	8005a12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005980:	4b35      	ldr	r3, [pc, #212]	; (8005a58 <xTaskIncrementTick+0x14c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <xTaskIncrementTick+0x158>)
 800598c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005990:	601a      	str	r2, [r3, #0]
					break;
 8005992:	e03e      	b.n	8005a12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005994:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <xTaskIncrementTick+0x14c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d203      	bcs.n	80059b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ac:	4a2d      	ldr	r2, [pc, #180]	; (8005a64 <xTaskIncrementTick+0x158>)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059b2:	e02e      	b.n	8005a12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3304      	adds	r3, #4
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fc8a 	bl	80052d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	3318      	adds	r3, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7ff fc81 	bl	80052d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	2201      	movs	r2, #1
 80059d6:	409a      	lsls	r2, r3
 80059d8:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <xTaskIncrementTick+0x15c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4313      	orrs	r3, r2
 80059de:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <xTaskIncrementTick+0x15c>)
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <xTaskIncrementTick+0x160>)
 80059f0:	441a      	add	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4619      	mov	r1, r3
 80059f8:	4610      	mov	r0, r2
 80059fa:	f7ff fc0d 	bl	8005218 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <xTaskIncrementTick+0x164>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d3b9      	bcc.n	8005980 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a10:	e7b6      	b.n	8005980 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <xTaskIncrementTick+0x164>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	4914      	ldr	r1, [pc, #80]	; (8005a6c <xTaskIncrementTick+0x160>)
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	440b      	add	r3, r1
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d901      	bls.n	8005a2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a2e:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <xTaskIncrementTick+0x168>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	617b      	str	r3, [r7, #20]
 8005a3a:	e004      	b.n	8005a46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a3c:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <xTaskIncrementTick+0x16c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	4a0d      	ldr	r2, [pc, #52]	; (8005a78 <xTaskIncrementTick+0x16c>)
 8005a44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a46:	697b      	ldr	r3, [r7, #20]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3718      	adds	r7, #24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20000b8c 	.word	0x20000b8c
 8005a54:	20000b68 	.word	0x20000b68
 8005a58:	20000b1c 	.word	0x20000b1c
 8005a5c:	20000b20 	.word	0x20000b20
 8005a60:	20000b7c 	.word	0x20000b7c
 8005a64:	20000b84 	.word	0x20000b84
 8005a68:	20000b6c 	.word	0x20000b6c
 8005a6c:	20000a68 	.word	0x20000a68
 8005a70:	20000a64 	.word	0x20000a64
 8005a74:	20000b78 	.word	0x20000b78
 8005a78:	20000b74 	.word	0x20000b74

08005a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a82:	4b29      	ldr	r3, [pc, #164]	; (8005b28 <vTaskSwitchContext+0xac>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a8a:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <vTaskSwitchContext+0xb0>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a90:	e044      	b.n	8005b1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005a92:	4b26      	ldr	r3, [pc, #152]	; (8005b2c <vTaskSwitchContext+0xb0>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <vTaskSwitchContext+0xb4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005aa6:	7afb      	ldrb	r3, [r7, #11]
 8005aa8:	f1c3 031f 	rsb	r3, r3, #31
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	4921      	ldr	r1, [pc, #132]	; (8005b34 <vTaskSwitchContext+0xb8>)
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10a      	bne.n	8005ad8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	607b      	str	r3, [r7, #4]
}
 8005ad4:	bf00      	nop
 8005ad6:	e7fe      	b.n	8005ad6 <vTaskSwitchContext+0x5a>
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <vTaskSwitchContext+0xb8>)
 8005ae4:	4413      	add	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3308      	adds	r3, #8
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d104      	bne.n	8005b08 <vTaskSwitchContext+0x8c>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <vTaskSwitchContext+0xbc>)
 8005b10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b12:	4b09      	ldr	r3, [pc, #36]	; (8005b38 <vTaskSwitchContext+0xbc>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	334c      	adds	r3, #76	; 0x4c
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <vTaskSwitchContext+0xc0>)
 8005b1a:	6013      	str	r3, [r2, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000b8c 	.word	0x20000b8c
 8005b2c:	20000b78 	.word	0x20000b78
 8005b30:	20000b6c 	.word	0x20000b6c
 8005b34:	20000a68 	.word	0x20000a68
 8005b38:	20000a64 	.word	0x20000a64
 8005b3c:	20000108 	.word	0x20000108

08005b40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b48:	f000 f852 	bl	8005bf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <prvIdleTask+0x28>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d9f9      	bls.n	8005b48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <prvIdleTask+0x2c>)
 8005b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b64:	e7f0      	b.n	8005b48 <prvIdleTask+0x8>
 8005b66:	bf00      	nop
 8005b68:	20000a68 	.word	0x20000a68
 8005b6c:	e000ed04 	.word	0xe000ed04

08005b70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b76:	2300      	movs	r3, #0
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	e00c      	b.n	8005b96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4a12      	ldr	r2, [pc, #72]	; (8005bd0 <prvInitialiseTaskLists+0x60>)
 8005b88:	4413      	add	r3, r2
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fb17 	bl	80051be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3301      	adds	r3, #1
 8005b94:	607b      	str	r3, [r7, #4]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d9ef      	bls.n	8005b7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b9c:	480d      	ldr	r0, [pc, #52]	; (8005bd4 <prvInitialiseTaskLists+0x64>)
 8005b9e:	f7ff fb0e 	bl	80051be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ba2:	480d      	ldr	r0, [pc, #52]	; (8005bd8 <prvInitialiseTaskLists+0x68>)
 8005ba4:	f7ff fb0b 	bl	80051be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ba8:	480c      	ldr	r0, [pc, #48]	; (8005bdc <prvInitialiseTaskLists+0x6c>)
 8005baa:	f7ff fb08 	bl	80051be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005bae:	480c      	ldr	r0, [pc, #48]	; (8005be0 <prvInitialiseTaskLists+0x70>)
 8005bb0:	f7ff fb05 	bl	80051be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005bb4:	480b      	ldr	r0, [pc, #44]	; (8005be4 <prvInitialiseTaskLists+0x74>)
 8005bb6:	f7ff fb02 	bl	80051be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <prvInitialiseTaskLists+0x78>)
 8005bbc:	4a05      	ldr	r2, [pc, #20]	; (8005bd4 <prvInitialiseTaskLists+0x64>)
 8005bbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005bc0:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <prvInitialiseTaskLists+0x7c>)
 8005bc2:	4a05      	ldr	r2, [pc, #20]	; (8005bd8 <prvInitialiseTaskLists+0x68>)
 8005bc4:	601a      	str	r2, [r3, #0]
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000a68 	.word	0x20000a68
 8005bd4:	20000af4 	.word	0x20000af4
 8005bd8:	20000b08 	.word	0x20000b08
 8005bdc:	20000b24 	.word	0x20000b24
 8005be0:	20000b38 	.word	0x20000b38
 8005be4:	20000b50 	.word	0x20000b50
 8005be8:	20000b1c 	.word	0x20000b1c
 8005bec:	20000b20 	.word	0x20000b20

08005bf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bf6:	e019      	b.n	8005c2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bf8:	f000 fa0c 	bl	8006014 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <prvCheckTasksWaitingTermination+0x50>)
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff fb62 	bl	80052d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c0e:	4b0d      	ldr	r3, [pc, #52]	; (8005c44 <prvCheckTasksWaitingTermination+0x54>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3b01      	subs	r3, #1
 8005c14:	4a0b      	ldr	r2, [pc, #44]	; (8005c44 <prvCheckTasksWaitingTermination+0x54>)
 8005c16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c22:	f000 fa27 	bl	8006074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f810 	bl	8005c4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <prvCheckTasksWaitingTermination+0x58>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1e1      	bne.n	8005bf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000b38 	.word	0x20000b38
 8005c44:	20000b64 	.word	0x20000b64
 8005c48:	20000b4c 	.word	0x20000b4c

08005c4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	334c      	adds	r3, #76	; 0x4c
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fce3 	bl	8006624 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d108      	bne.n	8005c7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 fb7f 	bl	8006370 <vPortFree>
				vPortFree( pxTCB );
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fb7c 	bl	8006370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c78:	e018      	b.n	8005cac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d103      	bne.n	8005c8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fb73 	bl	8006370 <vPortFree>
	}
 8005c8a:	e00f      	b.n	8005cac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d00a      	beq.n	8005cac <prvDeleteTCB+0x60>
	__asm volatile
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	60fb      	str	r3, [r7, #12]
}
 8005ca8:	bf00      	nop
 8005caa:	e7fe      	b.n	8005caa <prvDeleteTCB+0x5e>
	}
 8005cac:	bf00      	nop
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cba:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <prvResetNextTaskUnblockTime+0x38>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc4:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ccc:	e008      	b.n	8005ce0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cce:	4b07      	ldr	r3, [pc, #28]	; (8005cec <prvResetNextTaskUnblockTime+0x38>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <prvResetNextTaskUnblockTime+0x3c>)
 8005cde:	6013      	str	r3, [r2, #0]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20000b1c 	.word	0x20000b1c
 8005cf0:	20000b84 	.word	0x20000b84

08005cf4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005cfe:	4b29      	ldr	r3, [pc, #164]	; (8005da4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fae1 	bl	80052d2 <uxListRemove>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d16:	4b24      	ldr	r3, [pc, #144]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d22:	43da      	mvns	r2, r3
 8005d24:	4b21      	ldr	r3, [pc, #132]	; (8005dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	4a20      	ldr	r2, [pc, #128]	; (8005dac <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d34:	d10a      	bne.n	8005d4c <prvAddCurrentTaskToDelayedList+0x58>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d007      	beq.n	8005d4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4619      	mov	r1, r3
 8005d44:	481a      	ldr	r0, [pc, #104]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d46:	f7ff fa67 	bl	8005218 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d4a:	e026      	b.n	8005d9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4413      	add	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d54:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d209      	bcs.n	8005d78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f7ff fa75 	bl	8005260 <vListInsert>
}
 8005d76:	e010      	b.n	8005d9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d78:	4b0f      	ldr	r3, [pc, #60]	; (8005db8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f7ff fa6b 	bl	8005260 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d202      	bcs.n	8005d9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d94:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6013      	str	r3, [r2, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000b68 	.word	0x20000b68
 8005da8:	20000a64 	.word	0x20000a64
 8005dac:	20000b6c 	.word	0x20000b6c
 8005db0:	20000b50 	.word	0x20000b50
 8005db4:	20000b20 	.word	0x20000b20
 8005db8:	20000b1c 	.word	0x20000b1c
 8005dbc:	20000b84 	.word	0x20000b84

08005dc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b04      	subs	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005df0:	4a0c      	ldr	r2, [pc, #48]	; (8005e24 <pxPortInitialiseStack+0x64>)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b14      	subs	r3, #20
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f06f 0202 	mvn.w	r2, #2
 8005e0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3b20      	subs	r3, #32
 8005e14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e16:	68fb      	ldr	r3, [r7, #12]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	08005e29 	.word	0x08005e29

08005e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e32:	4b12      	ldr	r3, [pc, #72]	; (8005e7c <prvTaskExitError+0x54>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e3a:	d00a      	beq.n	8005e52 <prvTaskExitError+0x2a>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60fb      	str	r3, [r7, #12]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <prvTaskExitError+0x28>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	60bb      	str	r3, [r7, #8]
}
 8005e64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e66:	bf00      	nop
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0fc      	beq.n	8005e68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	20000104 	.word	0x20000104

08005e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <pxCurrentTCBConst2>)
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	6808      	ldr	r0, [r1, #0]
 8005e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e8a:	f380 8809 	msr	PSP, r0
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8811 	msr	BASEPRI, r0
 8005e9a:	4770      	bx	lr
 8005e9c:	f3af 8000 	nop.w

08005ea0 <pxCurrentTCBConst2>:
 8005ea0:	20000a64 	.word	0x20000a64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop

08005ea8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ea8:	4808      	ldr	r0, [pc, #32]	; (8005ecc <prvPortStartFirstTask+0x24>)
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	6800      	ldr	r0, [r0, #0]
 8005eae:	f380 8808 	msr	MSP, r0
 8005eb2:	f04f 0000 	mov.w	r0, #0
 8005eb6:	f380 8814 	msr	CONTROL, r0
 8005eba:	b662      	cpsie	i
 8005ebc:	b661      	cpsie	f
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	df00      	svc	0
 8005ec8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eca:	bf00      	nop
 8005ecc:	e000ed08 	.word	0xe000ed08

08005ed0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ed6:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <xPortStartScheduler+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d10a      	bne.n	8005ef6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	e7fe      	b.n	8005ef4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ef6:	4b3e      	ldr	r3, [pc, #248]	; (8005ff0 <xPortStartScheduler+0x120>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a3f      	ldr	r2, [pc, #252]	; (8005ff8 <xPortStartScheduler+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d10a      	bne.n	8005f16 <xPortStartScheduler+0x46>
	__asm volatile
 8005f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f04:	f383 8811 	msr	BASEPRI, r3
 8005f08:	f3bf 8f6f 	isb	sy
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	60fb      	str	r3, [r7, #12]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <xPortStartScheduler+0x12c>)
 8005f18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b31      	ldr	r3, [pc, #196]	; (8006000 <xPortStartScheduler+0x130>)
 8005f3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f3e:	4b31      	ldr	r3, [pc, #196]	; (8006004 <xPortStartScheduler+0x134>)
 8005f40:	2207      	movs	r2, #7
 8005f42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f44:	e009      	b.n	8005f5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f46:	4b2f      	ldr	r3, [pc, #188]	; (8006004 <xPortStartScheduler+0x134>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	4a2d      	ldr	r2, [pc, #180]	; (8006004 <xPortStartScheduler+0x134>)
 8005f4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	d0ef      	beq.n	8005f46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f66:	4b27      	ldr	r3, [pc, #156]	; (8006004 <xPortStartScheduler+0x134>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f1c3 0307 	rsb	r3, r3, #7
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d00a      	beq.n	8005f88 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f76:	f383 8811 	msr	BASEPRI, r3
 8005f7a:	f3bf 8f6f 	isb	sy
 8005f7e:	f3bf 8f4f 	dsb	sy
 8005f82:	60bb      	str	r3, [r7, #8]
}
 8005f84:	bf00      	nop
 8005f86:	e7fe      	b.n	8005f86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f88:	4b1e      	ldr	r3, [pc, #120]	; (8006004 <xPortStartScheduler+0x134>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <xPortStartScheduler+0x134>)
 8005f90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f92:	4b1c      	ldr	r3, [pc, #112]	; (8006004 <xPortStartScheduler+0x134>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f9a:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <xPortStartScheduler+0x134>)
 8005f9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fa6:	4b18      	ldr	r3, [pc, #96]	; (8006008 <xPortStartScheduler+0x138>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a17      	ldr	r2, [pc, #92]	; (8006008 <xPortStartScheduler+0x138>)
 8005fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fb2:	4b15      	ldr	r3, [pc, #84]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a14      	ldr	r2, [pc, #80]	; (8006008 <xPortStartScheduler+0x138>)
 8005fb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fbe:	f000 f8dd 	bl	800617c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fc2:	4b12      	ldr	r3, [pc, #72]	; (800600c <xPortStartScheduler+0x13c>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fc8:	f000 f8fc 	bl	80061c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fcc:	4b10      	ldr	r3, [pc, #64]	; (8006010 <xPortStartScheduler+0x140>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0f      	ldr	r2, [pc, #60]	; (8006010 <xPortStartScheduler+0x140>)
 8005fd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fd8:	f7ff ff66 	bl	8005ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fdc:	f7ff fd4e 	bl	8005a7c <vTaskSwitchContext>
	prvTaskExitError();
 8005fe0:	f7ff ff22 	bl	8005e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000ed00 	.word	0xe000ed00
 8005ff4:	410fc271 	.word	0x410fc271
 8005ff8:	410fc270 	.word	0x410fc270
 8005ffc:	e000e400 	.word	0xe000e400
 8006000:	20000b90 	.word	0x20000b90
 8006004:	20000b94 	.word	0x20000b94
 8006008:	e000ed20 	.word	0xe000ed20
 800600c:	20000104 	.word	0x20000104
 8006010:	e000ef34 	.word	0xe000ef34

08006014 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	607b      	str	r3, [r7, #4]
}
 800602c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <vPortEnterCritical+0x58>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <vPortEnterCritical+0x58>)
 8006036:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006038:	4b0c      	ldr	r3, [pc, #48]	; (800606c <vPortEnterCritical+0x58>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d10f      	bne.n	8006060 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006040:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <vPortEnterCritical+0x5c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <vPortEnterCritical+0x4c>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <vPortEnterCritical+0x4a>
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	20000104 	.word	0x20000104
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <vPortExitCritical+0x50>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <vPortExitCritical+0x24>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	607b      	str	r3, [r7, #4]
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006098:	4b0a      	ldr	r3, [pc, #40]	; (80060c4 <vPortExitCritical+0x50>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3b01      	subs	r3, #1
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <vPortExitCritical+0x50>)
 80060a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060a2:	4b08      	ldr	r3, [pc, #32]	; (80060c4 <vPortExitCritical+0x50>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d105      	bne.n	80060b6 <vPortExitCritical+0x42>
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80060b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000104 	.word	0x20000104
	...

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	; (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7ff fcbc 	bl	8005a7c <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	20000a64 	.word	0x20000a64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
}
 8006150:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006152:	f7ff fbdb 	bl	800590c <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <SysTick_Handler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	; (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	; (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	; (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000000 	.word	0x20000000
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061d2:	bf00      	nop
 80061d4:	e000ed88 	.word	0xe000ed88

080061d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061e4:	f7ff fae8 	bl	80057b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061e8:	4b5b      	ldr	r3, [pc, #364]	; (8006358 <pvPortMalloc+0x180>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061f0:	f000 f920 	bl	8006434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061f4:	4b59      	ldr	r3, [pc, #356]	; (800635c <pvPortMalloc+0x184>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8093 	bne.w	8006328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01d      	beq.n	8006244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006208:	2208      	movs	r2, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <pvPortMalloc+0x6c>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	617b      	str	r3, [r7, #20]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06e      	beq.n	8006328 <pvPortMalloc+0x150>
 800624a:	4b45      	ldr	r3, [pc, #276]	; (8006360 <pvPortMalloc+0x188>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d869      	bhi.n	8006328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <pvPortMalloc+0x18c>)
 8006256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <pvPortMalloc+0x18c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625e:	e004      	b.n	800626a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d903      	bls.n	800627c <pvPortMalloc+0xa4>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <pvPortMalloc+0x180>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	429a      	cmp	r2, r3
 8006284:	d050      	beq.n	8006328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	2308      	movs	r3, #8
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d91f      	bls.n	80062e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <pvPortMalloc+0xf8>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	613b      	str	r3, [r7, #16]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062e2:	69b8      	ldr	r0, [r7, #24]
 80062e4:	f000 f908 	bl	80064f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <pvPortMalloc+0x188>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <pvPortMalloc+0x188>)
 80062f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <pvPortMalloc+0x188>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <pvPortMalloc+0x190>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d203      	bcs.n	800630a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <pvPortMalloc+0x188>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <pvPortMalloc+0x190>)
 8006308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <pvPortMalloc+0x184>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	431a      	orrs	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <pvPortMalloc+0x194>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a11      	ldr	r2, [pc, #68]	; (800636c <pvPortMalloc+0x194>)
 8006326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006328:	f7ff fa54 	bl	80057d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <pvPortMalloc+0x174>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <pvPortMalloc+0x172>
	return pvReturn;
 800634c:	69fb      	ldr	r3, [r7, #28]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200047a0 	.word	0x200047a0
 800635c:	200047b4 	.word	0x200047b4
 8006360:	200047a4 	.word	0x200047a4
 8006364:	20004798 	.word	0x20004798
 8006368:	200047a8 	.word	0x200047a8
 800636c:	200047ac 	.word	0x200047ac

08006370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04d      	beq.n	800641e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006382:	2308      	movs	r3, #8
 8006384:	425b      	negs	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <vPortFree+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <vPortFree+0x44>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <vPortFree+0x62>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60bb      	str	r3, [r7, #8]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <vPortFree+0xb8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01e      	beq.n	800641e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11a      	bne.n	800641e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <vPortFree+0xb8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063f8:	f7ff f9de 	bl	80057b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <vPortFree+0xbc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4413      	add	r3, r2
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <vPortFree+0xbc>)
 8006408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800640a:	6938      	ldr	r0, [r7, #16]
 800640c:	f000 f874 	bl	80064f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortFree+0xc0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vPortFree+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800641a:	f7ff f9db 	bl	80057d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200047b4 	.word	0x200047b4
 800642c:	200047a4 	.word	0x200047a4
 8006430:	200047b0 	.word	0x200047b0

08006434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <prvHeapInit+0xac>)
 8006442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <prvHeapInit+0xac>)
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <prvHeapInit+0xb0>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <prvHeapInit+0xb0>)
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <prvHeapInit+0xb4>)
 8006494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvHeapInit+0xb4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <prvHeapInit+0xb8>)
 80064c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <prvHeapInit+0xbc>)
 80064ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvHeapInit+0xc0>)
 80064ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	20000b98 	.word	0x20000b98
 80064e4:	20004798 	.word	0x20004798
 80064e8:	200047a0 	.word	0x200047a0
 80064ec:	200047a8 	.word	0x200047a8
 80064f0:	200047a4 	.word	0x200047a4
 80064f4:	200047b4 	.word	0x200047b4

080064f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvInsertBlockIntoFreeList+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <prvInsertBlockIntoFreeList+0x14>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8f7      	bhi.n	8006506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d118      	bne.n	8006580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d00d      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e003      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20004798 	.word	0x20004798
 80065a8:	200047a0 	.word	0x200047a0

080065ac <__libc_init_array>:
 80065ac:	b570      	push	{r4, r5, r6, lr}
 80065ae:	4d0d      	ldr	r5, [pc, #52]	; (80065e4 <__libc_init_array+0x38>)
 80065b0:	4c0d      	ldr	r4, [pc, #52]	; (80065e8 <__libc_init_array+0x3c>)
 80065b2:	1b64      	subs	r4, r4, r5
 80065b4:	10a4      	asrs	r4, r4, #2
 80065b6:	2600      	movs	r6, #0
 80065b8:	42a6      	cmp	r6, r4
 80065ba:	d109      	bne.n	80065d0 <__libc_init_array+0x24>
 80065bc:	4d0b      	ldr	r5, [pc, #44]	; (80065ec <__libc_init_array+0x40>)
 80065be:	4c0c      	ldr	r4, [pc, #48]	; (80065f0 <__libc_init_array+0x44>)
 80065c0:	f000 f8e4 	bl	800678c <_init>
 80065c4:	1b64      	subs	r4, r4, r5
 80065c6:	10a4      	asrs	r4, r4, #2
 80065c8:	2600      	movs	r6, #0
 80065ca:	42a6      	cmp	r6, r4
 80065cc:	d105      	bne.n	80065da <__libc_init_array+0x2e>
 80065ce:	bd70      	pop	{r4, r5, r6, pc}
 80065d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d4:	4798      	blx	r3
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7ee      	b.n	80065b8 <__libc_init_array+0xc>
 80065da:	f855 3b04 	ldr.w	r3, [r5], #4
 80065de:	4798      	blx	r3
 80065e0:	3601      	adds	r6, #1
 80065e2:	e7f2      	b.n	80065ca <__libc_init_array+0x1e>
 80065e4:	0800685c 	.word	0x0800685c
 80065e8:	0800685c 	.word	0x0800685c
 80065ec:	0800685c 	.word	0x0800685c
 80065f0:	08006864 	.word	0x08006864

080065f4 <__retarget_lock_acquire_recursive>:
 80065f4:	4770      	bx	lr

080065f6 <__retarget_lock_release_recursive>:
 80065f6:	4770      	bx	lr

080065f8 <memset>:
 80065f8:	4402      	add	r2, r0
 80065fa:	4603      	mov	r3, r0
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d100      	bne.n	8006602 <memset+0xa>
 8006600:	4770      	bx	lr
 8006602:	f803 1b01 	strb.w	r1, [r3], #1
 8006606:	e7f9      	b.n	80065fc <memset+0x4>

08006608 <cleanup_glue>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	460c      	mov	r4, r1
 800660c:	6809      	ldr	r1, [r1, #0]
 800660e:	4605      	mov	r5, r0
 8006610:	b109      	cbz	r1, 8006616 <cleanup_glue+0xe>
 8006612:	f7ff fff9 	bl	8006608 <cleanup_glue>
 8006616:	4621      	mov	r1, r4
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800661e:	f000 b869 	b.w	80066f4 <_free_r>
	...

08006624 <_reclaim_reent>:
 8006624:	4b2c      	ldr	r3, [pc, #176]	; (80066d8 <_reclaim_reent+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4283      	cmp	r3, r0
 800662a:	b570      	push	{r4, r5, r6, lr}
 800662c:	4604      	mov	r4, r0
 800662e:	d051      	beq.n	80066d4 <_reclaim_reent+0xb0>
 8006630:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006632:	b143      	cbz	r3, 8006646 <_reclaim_reent+0x22>
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d14a      	bne.n	80066d0 <_reclaim_reent+0xac>
 800663a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	b111      	cbz	r1, 8006646 <_reclaim_reent+0x22>
 8006640:	4620      	mov	r0, r4
 8006642:	f000 f857 	bl	80066f4 <_free_r>
 8006646:	6961      	ldr	r1, [r4, #20]
 8006648:	b111      	cbz	r1, 8006650 <_reclaim_reent+0x2c>
 800664a:	4620      	mov	r0, r4
 800664c:	f000 f852 	bl	80066f4 <_free_r>
 8006650:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006652:	b111      	cbz	r1, 800665a <_reclaim_reent+0x36>
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f84d 	bl	80066f4 <_free_r>
 800665a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800665c:	b111      	cbz	r1, 8006664 <_reclaim_reent+0x40>
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f848 	bl	80066f4 <_free_r>
 8006664:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006666:	b111      	cbz	r1, 800666e <_reclaim_reent+0x4a>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 f843 	bl	80066f4 <_free_r>
 800666e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006670:	b111      	cbz	r1, 8006678 <_reclaim_reent+0x54>
 8006672:	4620      	mov	r0, r4
 8006674:	f000 f83e 	bl	80066f4 <_free_r>
 8006678:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800667a:	b111      	cbz	r1, 8006682 <_reclaim_reent+0x5e>
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f839 	bl	80066f4 <_free_r>
 8006682:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006684:	b111      	cbz	r1, 800668c <_reclaim_reent+0x68>
 8006686:	4620      	mov	r0, r4
 8006688:	f000 f834 	bl	80066f4 <_free_r>
 800668c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800668e:	b111      	cbz	r1, 8006696 <_reclaim_reent+0x72>
 8006690:	4620      	mov	r0, r4
 8006692:	f000 f82f 	bl	80066f4 <_free_r>
 8006696:	69a3      	ldr	r3, [r4, #24]
 8006698:	b1e3      	cbz	r3, 80066d4 <_reclaim_reent+0xb0>
 800669a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800669c:	4620      	mov	r0, r4
 800669e:	4798      	blx	r3
 80066a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066a2:	b1b9      	cbz	r1, 80066d4 <_reclaim_reent+0xb0>
 80066a4:	4620      	mov	r0, r4
 80066a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066aa:	f7ff bfad 	b.w	8006608 <cleanup_glue>
 80066ae:	5949      	ldr	r1, [r1, r5]
 80066b0:	b941      	cbnz	r1, 80066c4 <_reclaim_reent+0xa0>
 80066b2:	3504      	adds	r5, #4
 80066b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066b6:	2d80      	cmp	r5, #128	; 0x80
 80066b8:	68d9      	ldr	r1, [r3, #12]
 80066ba:	d1f8      	bne.n	80066ae <_reclaim_reent+0x8a>
 80066bc:	4620      	mov	r0, r4
 80066be:	f000 f819 	bl	80066f4 <_free_r>
 80066c2:	e7ba      	b.n	800663a <_reclaim_reent+0x16>
 80066c4:	680e      	ldr	r6, [r1, #0]
 80066c6:	4620      	mov	r0, r4
 80066c8:	f000 f814 	bl	80066f4 <_free_r>
 80066cc:	4631      	mov	r1, r6
 80066ce:	e7ef      	b.n	80066b0 <_reclaim_reent+0x8c>
 80066d0:	2500      	movs	r5, #0
 80066d2:	e7ef      	b.n	80066b4 <_reclaim_reent+0x90>
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	bf00      	nop
 80066d8:	20000108 	.word	0x20000108

080066dc <__malloc_lock>:
 80066dc:	4801      	ldr	r0, [pc, #4]	; (80066e4 <__malloc_lock+0x8>)
 80066de:	f7ff bf89 	b.w	80065f4 <__retarget_lock_acquire_recursive>
 80066e2:	bf00      	nop
 80066e4:	200047b8 	.word	0x200047b8

080066e8 <__malloc_unlock>:
 80066e8:	4801      	ldr	r0, [pc, #4]	; (80066f0 <__malloc_unlock+0x8>)
 80066ea:	f7ff bf84 	b.w	80065f6 <__retarget_lock_release_recursive>
 80066ee:	bf00      	nop
 80066f0:	200047b8 	.word	0x200047b8

080066f4 <_free_r>:
 80066f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f6:	2900      	cmp	r1, #0
 80066f8:	d044      	beq.n	8006784 <_free_r+0x90>
 80066fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066fe:	9001      	str	r0, [sp, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f1a1 0404 	sub.w	r4, r1, #4
 8006706:	bfb8      	it	lt
 8006708:	18e4      	addlt	r4, r4, r3
 800670a:	f7ff ffe7 	bl	80066dc <__malloc_lock>
 800670e:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <_free_r+0x94>)
 8006710:	9801      	ldr	r0, [sp, #4]
 8006712:	6813      	ldr	r3, [r2, #0]
 8006714:	b933      	cbnz	r3, 8006724 <_free_r+0x30>
 8006716:	6063      	str	r3, [r4, #4]
 8006718:	6014      	str	r4, [r2, #0]
 800671a:	b003      	add	sp, #12
 800671c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006720:	f7ff bfe2 	b.w	80066e8 <__malloc_unlock>
 8006724:	42a3      	cmp	r3, r4
 8006726:	d908      	bls.n	800673a <_free_r+0x46>
 8006728:	6825      	ldr	r5, [r4, #0]
 800672a:	1961      	adds	r1, r4, r5
 800672c:	428b      	cmp	r3, r1
 800672e:	bf01      	itttt	eq
 8006730:	6819      	ldreq	r1, [r3, #0]
 8006732:	685b      	ldreq	r3, [r3, #4]
 8006734:	1949      	addeq	r1, r1, r5
 8006736:	6021      	streq	r1, [r4, #0]
 8006738:	e7ed      	b.n	8006716 <_free_r+0x22>
 800673a:	461a      	mov	r2, r3
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	b10b      	cbz	r3, 8006744 <_free_r+0x50>
 8006740:	42a3      	cmp	r3, r4
 8006742:	d9fa      	bls.n	800673a <_free_r+0x46>
 8006744:	6811      	ldr	r1, [r2, #0]
 8006746:	1855      	adds	r5, r2, r1
 8006748:	42a5      	cmp	r5, r4
 800674a:	d10b      	bne.n	8006764 <_free_r+0x70>
 800674c:	6824      	ldr	r4, [r4, #0]
 800674e:	4421      	add	r1, r4
 8006750:	1854      	adds	r4, r2, r1
 8006752:	42a3      	cmp	r3, r4
 8006754:	6011      	str	r1, [r2, #0]
 8006756:	d1e0      	bne.n	800671a <_free_r+0x26>
 8006758:	681c      	ldr	r4, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	6053      	str	r3, [r2, #4]
 800675e:	4421      	add	r1, r4
 8006760:	6011      	str	r1, [r2, #0]
 8006762:	e7da      	b.n	800671a <_free_r+0x26>
 8006764:	d902      	bls.n	800676c <_free_r+0x78>
 8006766:	230c      	movs	r3, #12
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	e7d6      	b.n	800671a <_free_r+0x26>
 800676c:	6825      	ldr	r5, [r4, #0]
 800676e:	1961      	adds	r1, r4, r5
 8006770:	428b      	cmp	r3, r1
 8006772:	bf04      	itt	eq
 8006774:	6819      	ldreq	r1, [r3, #0]
 8006776:	685b      	ldreq	r3, [r3, #4]
 8006778:	6063      	str	r3, [r4, #4]
 800677a:	bf04      	itt	eq
 800677c:	1949      	addeq	r1, r1, r5
 800677e:	6021      	streq	r1, [r4, #0]
 8006780:	6054      	str	r4, [r2, #4]
 8006782:	e7ca      	b.n	800671a <_free_r+0x26>
 8006784:	b003      	add	sp, #12
 8006786:	bd30      	pop	{r4, r5, pc}
 8006788:	200047bc 	.word	0x200047bc

0800678c <_init>:
 800678c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678e:	bf00      	nop
 8006790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006792:	bc08      	pop	{r3}
 8006794:	469e      	mov	lr, r3
 8006796:	4770      	bx	lr

08006798 <_fini>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	bf00      	nop
 800679c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800679e:	bc08      	pop	{r3}
 80067a0:	469e      	mov	lr, r3
 80067a2:	4770      	bx	lr
